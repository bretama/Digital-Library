#
# Resource bundle description
#

Language.code:zh  
Language.name:英语  

OutputEncoding.unix:utf-8  
OutputEncoding.windows:utf-8  


#
# Common output messages and strings
#

common.cannot_create_file:错误：无法创建文件％s  

common.cannot_find_cfg_file:错误：无法找到配置文件％s  

common.cannot_open:错误：无法打开％s  

common.cannot_open_fail_log:错误：无法打开日志文件％S  

common.cannot_open_output_file:错误：无法打开输出文件％s  

common.cannot_read:错误：无法读取％s  

common.cannot_read_file:错误：无法读取文件％s  

common.general_options:通用选项（用于％s）  

common.must_be_implemented:函数必须在子类中实现。  

common.options:选项  

common.processing:处理  

common.specific_options:具体选项  

common.usage:用法  

common.info:信息  

common.invalid_options:非法选项：％s  

common.true:真  

common.false:假  

common.deprecated:重写  
#
# Script option descriptions and output messages
#

scripts.language:用何种语言显示选项描述（例如'en US'指定美国英语）。要求选项描述的翻译必须能在perllib/strings_language-code.rb文件中找到。  

scripts.xml:以XML形式产生信息，无需华丽的评述但要详细。  

scripts.listall:列出已知所有项目的选项。  

scripts.describeall:显示已知所有项目的选项。  

scripts.both_old_options:警告：选项-removeold与-keepold或-incremental一起设定，假定条件为-removeold。％s目录下的当前内容将被删除。  

scripts.no_old_options:警告：选项-removeold, -keepold 或 -incremental中的一个必须指定，假定为-removeold。％s目录下的当前内容将被删除。  

scripts.gli:从GLI中运行该脚本的参数，激活专门的GLI输出。  

# -- buildcol.pl --

buildcol.archivedir:存档文件存放处  

buildcol.builddir:索引存放处  

buildcol.cachedir:在复制到创建目录下之前收藏会暂时存放在这里。  

buildcol.cannot_open_cfg_file:警告：无法打开配置文件进行升级：％s  

buildcol.collectdir:“collect”目录的路径  

buildcol.copying_back_cached_build:复制回缓存的创建  

buildcol.create_images:试图为新收藏创建假定图像。这有赖于已经安装了Gimp以及相关的perl模块。  

buildcol.debug:将输出发送到STDOUT  

buildcol.desc:用于从存档文档中创建Greenstone馆藏的PERL脚本。  

buildcol.faillog:错误日志文件名。该日志存储所有无法被处理的文件的名字。  

buildcol.incremental_default_builddir:警告：缺省的创建目录为“building”。如果你想以递增的方式添加到索引目录，请使用buildcol.pl的“-builddir index”选项。  

buildcol.index:待创建的索引（如果未设定，则创建配置文件中的全部索引）。  

buildcol.incremental:仅只以前未被索引过的索引文档。这意味着-keepold选项。依赖于lucene索引器。  

buildcol.keepold:不清除创建目录下的当前内容。  

buildcol.maxdocs:待创建文档的最大值。  
buildcol.maxnumeric:索引库中一个‘词’所能含有的最多的位数。大的数字会分割成几个词以便构造索引。例如，如果最大位数是4，“1342663”会分割成“1342"和"663"。  
buildcol.mode:创建过程中将被实施的部分。  
buildcol.mode.all:全部实施。  
buildcol.mode.build_index:仅创建文本的索引。  
buildcol.mode.compress_text:仅压缩文本。  
buildcol.mode.infodb:仅创建metadata数据库。  

buildcol.no_default_images:不会生成假定图像  

buildcol.no_image_script:警告：无法找到图像生成脚本：％s  

buildcol.no_strip_html:不要从索引文本中去除html标签（仅适用于mgpp收藏）。  

buildcol.no_text:不要存储压缩文本。如果要在运行状态下显示原始文档，该选项有助于减小所创建索引的大小（即，将无法得到压缩的文本）。  

buildcol.sections_index_document_metadata:段落级别下的索引文档metadata。  
buildcol.sections_index_document_metadata.never:不要在段落级别创建任何文档级metadata。  
buildcol.sections_index_document_metadata.always:即使段落级别metadata存在，也要添加所有指定的文档级metadata。  
buildcol.sections_index_document_metadata.unless_section_metadata_exists:仅当所指段落级metadata不存在时才添加文档级metadata。  

buildcol.out:存储输出状态的文件名。  

buildcol.params:【选项】收藏的名称  

buildcol.remove_empty_classifications:隐藏空的分类器和分类节点（即那些不含文档的节点）  

buildcol.removeold:删除创建目录下的旧文档。  

buildcol.unlinked_col_images:收藏中的图像可能未被正确链接。  

buildcol.unknown_mode:未知模式：％s  

buildcol.updating_archive_cache:升级存档缓存  

buildcol.verbosity:控制输出的数量。0＝无，3＝很多  


# -- classinfo.pl --

classinfo.collection:为收藏命名会令classinfo.pl首先在collect/collection-name/perllib/classify中搜寻。如果在那里找不到分类器，则搜寻perllib/classify目录。  

classinfo.desc:打印有关分类器的信息。  

classinfo.general_options:通用选项从分类器的父类继承。  

classinfo.info:信息  

classinfo.no_classifier_name:错误：必须提供分类器名称。  

classinfo.option_types:分类器可接受两种选项。  

classinfo.params:【选项】分类器名称  

classinfo.passing_options:可将选项包括在collect.cfg配置文件中从而传递给其他分类器。  

classinfo.specific_options:定义在分类器中的具体选项，且只适用于该分类器。  

# -- downloadfrom.pl --
downloadfrom.cache_dir:缓存目录的位置。  
downloadfrom.desc:从外置服务器下载的文件。  
downloadfrom.download_mode:下载服务器的类型。  
downloadfrom.download_mode.Web:HTTP  
downloadfrom.download_mode.MediaWiki:MediaWiki网站。  
downloadfrom.download_mode.OAI:Open Archives Initiative  
downloadfrom.download_mode.z3950:z3950 服务器  
downloadfrom.download_mode.SRW:SearchRetrieve 网上服务。  
downloadfrom.incorrect_mode:download_mode选项错误  
downloadfrom.info:列出服务器信息，不要下载。  
downloadfrom.params:【通用选项】【具体下载选项】  

# -- downloadinfo.pl --

downloadinfo.desc:列出下载模块的信息。  
downloadinfo.collection:为收藏命名会令downloadinfo.pl首先在collect/collection-name/perllib/downloaders中搜寻。如果在那里找不到分类器，则搜寻perllib/downloaders目录。  
downloadinfo.params:【选项】【下载模块】  
downloadinfo.general_options:通用选项从下载模块的父类继承。  
downloadinfo.specific_options:定义在下载模块中的具体选项，且只适用于该下载器。  
downloadinfo.option_types:下载模块可接受两种选项。  

# -- explode_metadata_database.pl --
explode.desc:激发一个metadata数据库。  

explode.collection:馆藏名称。有些插件会寻找馆藏文件夹中的附属文件。  
 
explode.document_field:设定要获取及包括在收藏中的文档的文件名的metadata元素。  

explode.document_prefix:文档位置的前缀（用于文档域选项）。  

explode.document_suffix:文档位置的后缀（用于文档域选项）。  

explode.encoding:用于当读入数据库文件时的编码。  
explode.metadata_set:用于输出所有metadata的metadata组（名词区间）。  
explode.plugin:用于激发的插件。  
explode.plugin_options:在扩展之前传递到插件的选项。选项名称必须以－开头。选项名和选项值以空格间隔。不能与-use_collection_plugin_options共用。  
explode.use_collection_plugin_options:读入馆藏配置文件并使用特定插件的选项。要求有-collection选项。不能与-plugin_options共用。  
explode.params:【选项】文件名  
explode.records_per_folder:存入每个子文件夹的记录的数量。  

# -- replace_srcdoc_with_html.pl --
srcreplace.desc:在重建时用生成的HTML文件替换源文档。  
srcreplace.params:[选项]文件名  
srcreplace.plugin:用来转换源文档的插件  

# -- exportcol.pl --

exportcol.out:存储输出状态的文件名。  
exportcol.cddir:输出CD内容的目录名。  
exportcol.cdname:CD-ROM的名字－一旦CD-ROM安装完毕后出现在开始菜单的名字。  
exportcol.desc:用于输出一个或多个Windows CD-ROM的PERL脚本  
exportcol.noinstall:生成一个可直接运行图书馆的CD-ROM且不在运行计算机上安装任何内容  
exportcol.params:【选项】收藏名1，收藏名2…  
exportcol.coll_not_found:忽略无效收藏％s：无法找到目录％s  
exportcol.coll_dirs_not_found:忽略无效收藏％s：以下目录中的一个无法找到：  
exportcol.fail:exportcol.pl失败:  
exportcol.no_valid_colls:无有效指定的收藏可以输出。  
exportcol.couldnt_create_dir:无法创建目录％s  
exportcol.couldnt_create_file:无法创建％s  
exportcol.instructions:生成一个自我安装的Windows CD-ROM，将该文件夹写出至CD-ROM。  
exportcol.non_exist_files:以下必要的文件及目录中的一个不存在：  
exportcol.success:exportcol.pl运行成功：  
exportcol.output_dir:输出的收藏在％s  
exportcol.export_coll_not_installed:输出至CD-ROM的功能未被安装。  

# -- import.pl --

import.archivedir:转换文件的目标目录。  

import.manifest:一个详细描述什么样的文件可被输入的XML文件。用于替代嵌套式向下递减输入文件夹方式，通常用于递增式创建。  

import.cannot_open_stats_file:警告：无法打开统计文件％s  

import.cannot_open_fail_log:错误：无法打开错误日志％s  

import.cannot_sort:警告：当groupsize>1时import.pl无法排列文档。Sortmeta选项将被忽略。  

import.collectdir:"collect”目录的路径。  

import.complete:输入完成。  

import.debug:打印输入文本至STDOUT（用于GreenstoneXML导入）。  

import.desc:PERL脚本，用于将文件导入成可供创建的格式（GreenstoneXML或者GreenstoneMETS）。  

import.faillog:失败日志文件名。该日志存有任何无法被处理的文件名。  

import.groupsize:组合在一个XML文件中的文档数量。  

import.gzip:使用gzip压缩生成的xml文档（当从压缩文档构建收藏时不要忘记把ZIPPlugin添加到插件列表中）。  

import.importdir:原始文件存放处  

import.incremental:仅输入比当前存档文件新的文档（根据时间标记）。  

import.keepold:不清除存档目录下的当前内容。  

import.maxdocs:待输入文档的最大值。  

import.no_import_dir:错误：无法找到输入目录（％s）。  

import.no_plugins_loaded:错误：无插件被调入。  

import.OIDtype:用于为每一个文档生成独特标志符的方法。  
import.OIDtype.hash:噪化文件的内容。收藏在每次被输入时文档的标志符不变。  

import.OIDtype.incremental:使用简单文档计数。比"hash"大大加快，但同样的文档内容会有不同的标志符，且随后的文档无法加入到现有的存档中。  

import.OIDtype.assigned:使用由OIDmetadata选项所给出的metadata的值（含有'D'前缀）；如果未指定，则使用具体文档的噪化值。这些标志符必须是独特的。  

import.OIDtype.dirname:使用父目录名字（含有'J'前缀）。℃与目录一一对应，且目录名字不重复。例如，import/b13as/h15ef/page.html的标志符应为Jh15ef。  

import.OIDmetadata:用于指定持有文档的独特标志符的metadata元素，与-OLDtype=assigned同时使用。  

import.saveas:存档文件的格式。  

import.out:存储输出状态的文件名。  

import.params:【选项】收藏的名称  

import.removeold:清除存档目录下的旧内容。  

import.removing_archives:清除存档目录下的当前内容。  

import.removing_tmpdir:清除收藏的"tmp"目录下的内容。  

import.reversesort:反向排序，用-sortmeta选项。  

import.site:馆藏目录所在的站点（对Greenstone3）。  

import.sortmeta:按字母顺序根据metadata对文档进行排列，用于创建。布尔查询的搜索结果按该顺序显示。当groupsize > 1时显示。也许是一个逗号分隔的集，按多个metadata值排序。  

import.statsfile:存储输入统计数据的文件名。  

import.stats_backup:打印统计数据至STDERR。  

import.verbosity:控制输出的数量。0＝无，3＝很多  

# -- schedule.pl --
schedule.deleted:本馆藏所删除的重建  
schedule.scheduled:为本馆藏创建的运行脚本  
schedule.cron:本馆藏所安排的重建  
schedule.params:[选项]  
schedule.error.email:-email要求设置-smtp、-toaddr和-fromaddr  
schedule.error.importbuild:必须设置-import和-build  
schedule.error.colname:必须用-colname指定馆藏。  
schedule.gli:从GLI中运行  
schedule.frequency:自动重建馆藏的频率  
schedule.frequency.hourly:每小时重建一次  
schedule.frequency.daily:每天重建一次  
schedule.frequency.weekly:每周重建一次  
schedule.action:如何设置自动重建  
schedule.action.add:安排自动重建的时间表  
schedule.action.update:更新现有的时间表  
schedule.action.delete:删除现有的时间表  
schedule.email:发送email通知  
schedule.schedule:设置自动重建的时间表  
schedule.colname:安排时刻表的目标馆藏名称  
schedule.import:对这个import（导入）命令安排时刻表  
schedule.build:对这个buildcol命令安排时刻表  
schedule.toaddr:将定时创建的通知发送到这个email地址  
schedule.toaddr.default:在文件->偏好中设置用户的email  
schedule.fromaddr:发送者email地址  
schedule.fromaddr.default:在main.cfg中指定馆藏的维护者  
schedule.smtp:发送email用到的邮件服务器  
schedule.smtp.default:在main.cfg中指定邮件服务器  
schedule.out:用来保存输出状态的文件名或对象  
# -- export.pl --

export.exportdir:输出文件的目标目录。  

export.cannot_open_stats_file:警告：无法打开统计文件％s  

export.cannot_open_fail_log:错误：无法打开错误日志％s  

export.cannot_sort:警告：当groupsize>1时export.pl无法对文档排序。Sortmeta选项被忽略。  

export.collectdir:”collect“目录的路径。  

export.complete:输出完成  

export.debug:打印输出的文本至STDOUT（用于GreenstoneXML导出）  

export.desc:用于将Greenstone收藏中的文件输出成另一种格式的PERL脚本  

export.faillog:错误日志文件名。该日志存储所有无法被处理的文件的名字。（假定条件下：collectdir/collname/etc/fail.log).  

export.groupsize:组合在一个XML文件中的文档数量。  

export.gzip:用gzip压缩生成的xml文档（当从压缩文档构建收藏时不要忘记将ZIPPlug添加到插件列表中）。  

export.importdir:原始文件存放处  

export.keepold:不清除输出目录下的当前内容。  

export.maxdocs:输出文档的最大数量。  

export.listall:列出所有存储的格式  

export.saveas:输出文档的格式。  

export.saveas.DSpace:DSpace Archive格式。  

export.saveas.GreenstoneMETS:METS格式，使用Greenstone格式。  
export.saveas.FedoraMETS:METS格式，使用Fedora格式。  

export.saveas.GreenstoneXML:Greenstone XML 存档格式  

export.saveas.MARCXML:MARC XML格式（一个MARC 21的XML版本）  

export.out:存储输出状态的文件名。  

export.params:【选项】收藏名  

export.removeold:删除输出目录下的旧文档。  

export.removing_export:删除输出目录下的当前文档。  

export.sortmeta:按字母顺序根据metadata对文档进行排列，用于创建。当groupsize>1时该选项会被禁用。  

export.statsfile:存储输出统计数据的文件名。  

export.stats_backup:打印统计数据至STDERR。  

export.verbosity:控制输出的数量。0＝无，3＝很多  



# -- mkcol.pl --

mkcol.about:收藏的‘关于’描述。  

mkcol.bad_name_cvs:错误：收藏不可被命名为CVS，因为这将与CVS版本系统生成的目录相冲突。  

mkcol.bad_name_svn:错误：不可将馆藏命名为.svn，因为这可能会与SVN版本系统创建的目录冲突。  

mkcol.bad_name_modelcol:错误：收藏不可被命名为modelcol，因为这是范例收藏的名字。  

mkcol.cannot_find_modelcol:错误：无法找到范例收藏％s  

mkcol.col_already_exists:错误：该收藏已经存在。  

mkcol.collectdir:存放新收藏的目录。  

mkcol.group_not_valid_in_gs3:组选项在Greenstone3模式（-gs3mode）中不可用。  
mkcol.creating_col:生成收藏％s  

mkcol.creator:收藏创建者的电子邮件地址。  

mkcol.creator_undefined:错误：创建者未被定义。该变量用于识别重复的收藏名字。  

mkcol.desc:用于生成新Greenstone收藏的目录结构的PERL脚本。  

mkcol.doing_replacements:为％s做替换  

mkcol.group:创建一个新馆藏组，而不是一个标准馆藏。  

mkcol.gs3mode:Greenstone 3馆藏模式。  

mkcol.long_colname:错误：收藏名字必须小于8个字母，以便与早期文件系统相匹配。  

mkcol.maintainer:收藏维护者的电子邮件地址（如果与创建者不同的话）。  

mkcol.no_collectdir:错误：collect目录不存在：％s  

mkcol.no_collectdir_specified:错误：未知馆藏（collect）目录，必须设置-site或-collectdir选项中的一个。  

mkcol.no_colname:错误：未指定收藏名称。  

mkcol.optionfile:由文件得到选项，用于长的命令行会导致问题的系统。  

mkcol.params:【选项】收藏名称  

mkcol.plugin:所用的perl插件模块（也许会有多个插件条目）。  

mkcol.public:如果该收藏有匿名访问。  
mkcol.public.true:收藏是公开的。  
mkcol.public.false:收藏是私密的。  

mkcol.quiet:静静的运行。  

mkcol.site:gs3mode（Greenstone3模式）用站点名与GSDL3HOME环境变量来确定馆藏目录（collectdir），除非设置了-collectdir。  

mkcol.success:新收藏在％s创建成功  

mkcol.title:收藏的标题。  

mkcol.win31compat:是否所指收藏目录必须与Windows 3.1文件格式相符（即，8个字母长）。  
mkcol.win31compat.true:目录名最长8个字母。  
mkcol.win31compat.false:目录名可任意长度。  

# -- pluginfo.pl --

pluginfo.collection:为收藏命名会令pluginfo.pl首先在collect/collection-name/perllib/plugins中搜寻。如果在那里找不到插件，则搜寻perllib/plugins目录。  

pluginfo.desc:列出插件的信息。  

pluginfo.general_options:通用选项从插件的父类继承。  

pluginfo.info:信息  

pluginfo.no_plugin_name:错误：必须提供插件名称。  

pluginfo.option_types:插件可接受两种选项。  

pluginfo.params:【选项】插件名  

pluginfo.passing_options:可将选项包括在collect.cfg配置文件中从而传递给其他插件。  

pluginfo.specific_options:定义在插件中的具体选项，且只适用于该插件。  


# -- plugoutinfo.pl --

plugoutinfo.collection:为收藏命名会令plugoutinfo.pl首先在collect/collection-name/perllib/plugouts中搜寻。如果在那里找不到插件，则搜寻perllib/plugouts目录。  

plugoutinfo.desc:列出plugout的信息。  

plugoutinfo.general_options:通用选项从plugout的父类继承。  

plugoutinfo.info:信息  

plugoutinfo.no_plugout_name:错误：必须提供plugout的名字。  

plugoutinfo.option_types:plugout可接受两种选项。  

plugoutinfo.params:【选项】plugout名  

plugoutinfo.passing_options:可将选项包括在collect.cfg配置文件中从而传递给其他plugout。  

plugoutinfo.specific_options:定义在plugout中的具体选项，且只适用于该plugout。  



#
# Classifier option descriptions
#

AllList.desc:创建一个包含所有文件的集。用于oaiserver。  

AZCompactList.allvalues:使用所有找到的 metadata 的值。  

AZCompactList.desc:用于按字母顺序排序的分类器插件(按a-z，A-Z，0-9)。首先生成一个水平的 A-Z 列表，然后生成一个垂直列表，其中列出了文档或组织了有着共同元数据的文档的书架。  

AZCompactList.doclevel:处理文件时所处的水平  
AZCompactList.doclevel.top:整个文件  
AZCompactList.doclevel.section:根据段落  

AZCompactList.firstvalueonly:使用所发现的第一个 metadata的 值  

AZCompactList.freqsort:根据节频率而非阿尔发-数值进行排列。  

AZCompactList.maxcompact:每一页所显示的文件的最多数量  

AZCompactList.metadata:一个单一元数据字段，或者一个逗点间隔的元数据字段列表，用于创建分类器。如果指定的是字段列表，则分类器将使用该列表中第一个有值的元数据字段。可与-firstvalueonly和-allvalues标签连用，来选择只使用第一个值，或者列表中所有元数据字段的值。  

AZCompactList.mincompact:每一页所显示的文件的最多数量  

AZCompactList.mingroup:使得在层级结构中形成一个组的最小值  

AZCompactList.minnesting:用于将一个集转换成一个嵌套集的最小值  

AZCompactList.recopt:用于嵌套的metadata如－metadata 年/组织  
AZCompactList.sort:排列叶节点的metadata域  

AZCompactSectionList.desc:用于分类段落而非文件的AZCompactList变体。条目是按照段落的metadata被分类的  

AZList.desc:用于按字母顺序进行排列的分类器插件(按a-z，A-Z，0-9)。生成一个水平的 A-Z列表，相关文件列在下面。  

AZList.metadata:一个单一元数据字段，或者一个逗点间隔的元数据字段列表，用于创建分类器。按照列表中的顺序，分类器使用第一个有值的元数据字段。文档列表将按照该元素排序。  

AZSectionList.desc:用于分类段落而非文件的AZList变体。条目是按照段落的metadata被分类的  

BasClas.bad_general_option:％s分类器使用了错误的选项。查看你的配置文件collect.cfg  

BasClas.builddir:将所建索引放在何处  

BasClas.buttonname:分类器上的标签以及导航条上的按键。假定值是由-metadata选项指定的metadata元素  

BasClas.desc:适用于所有分类器的基类  

BasClas.no_metadata_formatting:不要做任何自动的metadata格式化（在排序时）  

BasClas.outhandle:写出文件时的输出通道  

BasClas.removeprefix:排序时metadata值中忽略的前缀  

BasClas.removesuffix:排序时metadata值中忽略的后缀  

BasClas.verbosity:控制输出的数量。0＝无，3＝很多  

Browse.desc:一个假的仅在导航条上提供一个链接的分类器，该链接指向一个捆绑了浏览和搜索的页面的原始模型。仅适用于mgpp类小型收藏。  

DateList.bymonth:按年和月分类而不是只按年。  

DateList.desc:用于按日期排序的分类器插件。假定条件下按‘Date'metadata排序。日期假定为yyyymmdd或yyyy-mm-dd格式。  

DateList.metadata:含有用来分类的日期的metadata。日期格式为yyyymmdd or yyyy-mm-dd。也可以是逗号分隔的集，在这种情况下使用所找到的第一个日期。  

DateList.reverse_sort:将文档按年代顺序排列（最新的在前）。  

DateList.nogroup:在水平集中将每一年列为单独条目，而不是按年区间列为几个条目。（用-bymonth选项也可令每个月变成单独条目）。  

DateList.no_special_formatting:不要在文档集中显示年和月的信息。  

DateList.sort:用于当两个文档含有相同日期时来进行排序的额外的metadata。  

HFileHierarchy.desc:基于一个辅助结构文件用于生成层级结构分类的分类器插件。  

Hierarchy.desc:用于生成层级结构分类的分类器插件。该插件可基于结构性metadata，或使用一个辅助性结构文件（用-hfile选项）。  

Hierarchy.documents_last:将文档节点显示在分类器节点之后。  

Hierarchy.hfile:使用设定的分类结构文件。  

Hierarchy.hlist_at_top:水平地显示分类的第一级。  

Hierarchy.reverse_sort:反顺序排列叶节点（用-sort)。  

Hierarchy.separator:当使用结构性metadata时用于分离的规则表述。  

Hierarchy.sort:用于排列叶节点的metadata域。如果该域未设定则叶节点不会被排序。  

Hierarchy.suppressfirstlevel:忽略metadata值的第一部分。这当metadata的第一元素是通用值时比较有用，例如在gsdlsourcefilename中的输入目录部分。  

Hierarchy.suppresslastlevel:忽略metadata值的最后一部分。这当metadata的每个元素都不同时比较有用，例如文件路径。  

HTML.desc:生成一个空的分类，即一个到网页的链接。  

HTML.url:链接到网页的地址。  

List.bookshelf_type:控制何时建立书架。  
List.bookshelf_type.always:即使叶子节点的每个分组里只有一个条目也使用书架图标。  
List.bookshelf_type.never:即使叶子节点的每个分组里有不只一个条目，也不使用书架图标。  
List.bookshelf_type.duplicate_only:当叶子节点的每个分组有不只一个条目时，使用书架图标。  

List.classify_sections:对段落而不是文档进行分类。

List.desc:一个通用且适应性强的集分类器，具有AZCompackList的大部分功能，较好的统一编码，metadata及排序能力。  

List.level_partition.per_letter:为每个字母创建一个分区。  
List.level_partition.constant_size:按固定大小创建分区。  
List.level_partition.per_letter_fixed_size:按大致固定的大小为每个字母创建一个分区。  

List.metadata:用于分类的metadata域。用‘/'分离层级结构中的级，用';'分离每一级的metadata域。  

List.partition_name_length:分区名的长度；假定条件下是1至3个字母，这要看区分一个分区的头和尾需要多少字母。该选项只有当partition_type_within_level设为'constant_size'时才有效。

List.partition_size_within_level:每个分区的大小（该选项只有当partition_type_within_level设为'constant_size'时才有效）。

List.partition_type_within_level:进行分区的类型：’per_letter', 'constant_size', 或'none'。

List.sort_leaf_nodes_using:用于排序叶子节点的元数据字段。用‘|’来分隔稳定分组的元数据组，用‘;’分隔每个组里的元数据字段。  

List.sort_using_unicode_collation:使用Unicode Collation算法排序。需要下载文件http://www.unicode.org/Public/UCA/latest/allkeys.txt，并放到perl的lib/Unicode/Collate文件夹中。  

List.use_hlist_for:使用水平集而不是垂直集的metadata域。用','分离metadata组，用‘;'分离每个组的metadata域。

SimpleList.metadata:一个单一Metadata域, 或一个逗点分开的 Metadata 域的集，用于分类。按照集的顺序，使用第一个含有metadata值的域。除非使用了-sort选项，集将按照该元素排序。如果未指定metadata，所有文档将被包含在集中，否则只有含有metadata值的文档才会被包括进来。

SimpleList.desc:简单集分类器插件。

SimpleList.sort:用于排列的metadata域。用'-sort nosort'则不进行排列。

Phind.desc:产生一个文本中发现的短句的层级结构，该结构可通过Java小程序浏览。  

Phind.language:创建层级结构的语言。语言是由两个字母的国家码鉴别的，例如 en (英语), es (西班牙语), 及 fr (法语)。语言是一个规则表述，因此 'en|fr' (英语或法语) 以及 '..' (匹配任何语言) 都有效。  

Phind.min_occurs:一个短句出现在文本中的最少次数，该文本将被包括在短句层级结构中。  

Phind.savephrases:设定后，短句信息会被作为文本存储在给定的文件中。建议使用绝对路径。  

Phind.suffixmode:短句提取程序的smode参数。参数值0意味着通用词语将被忽略，值1意味着通用词语将被使用。  

Phind.text:语言创建短句层级结构的文本。  

Phind.thesaurus:在收藏的etc目录中存储的Phind格式的同类词汇编的名字。  

Phind.title:语言描述每个文档的metadata的域。  

Phind.untidy:不要删除正在运行的文件。  

RecentDocumentsList.desc:一个可列出新添加的或修改的文档的分类器。  

RecentDocumentsList.include_docs_added_since:仅包括在指定日期（yyyymmdd或yyyy-mm-dd格式）以后修改或添加的文档。  

RecentDocumentsList.include_most_recently_added:仅包括指定数量的，近期添加的文档。仅当include_docs_added_since信息未设时使用。  

RecentDocumentsList.sort:用于为集排序的metadata。如未设定，集将按修改/添加的日期排序。  

SectionList.desc:与集分类器相同但包含文档的所有段落（不包括顶级）而不是仅仅顶级文档自己。  

Collage.desc:一个Java小程序用于显示收藏中找到的拼贴图像。  

Collage.geometry:拼贴画布的尺寸。指定一个600像素宽x400像素高的画布，应设为600x400。  

Collage.maxDepth:拼贴的图像是从镜像所用浏览分类器抽取的。该选项控制镜像过程的最大深度。  

Collage.maxDisplay:一次所显示的图像的最大数量。  

Collage.imageType:通过指定文件扩展名来控制哪些文件会用于图像总汇中。文件扩展名集用(%%)苻号区分。  

Collage.bgcolor:拼贴画布的背景色，十六进制（例如＃008000森林绿背景）。  

Collage.buttonname:分类器屏幕标签及导航条上的按钮  

Collage.refreshDelay:拼贴画布的更新率，以微秒计。  

Collage.isJava2:用于控制哪些Java运行类被使用。更高版本的Java（如Java 1.2以上)为控制图像的透明度提供更好的支持，本标签用于控制这一设置，即使一些浏览器的Java运行版本是1.1。该Java小程序在缺省情况下将自动侦测浏览器的Java版本并采取相应措施。  

Collage.imageMustNotHave:用于隐藏不该出现的图像，如导航条上的图像按钮。  

Collage.caption:显示在拼贴画布下的选项文字  


#
# Plugin option descriptions
#
AcronymExtractor.adding:添加  

AcronymExtractor.already_seen:已见到  

AcronymExtractor.desc:抽取地点与文本中缩写词表示的插件  

AcronymExtractor.done_acronym_extract:完成提取缩写词  

AcronymExtractor.done_acronym_markup:完成缩写词标记  

AcronymExtractor.extract_acronyms:从文本中提取缩写词并设为metadata  

AcronymExtractor.extracting_acronyms:提取缩写词  

AcronymExtractor.marking_up_acronyms:标识缩写词  

AcronymExtractor.markup_acronyms:在文档文本中添加缩写词。  

ArchivesInfPlugin.desc:本插件处理导入过程生成的存档文件数据库（archives-doc）。它将该数据库中的每个存档（archive）文件通过管道机制递交给GreenstoneXMLPlugin处理。  

AutoExtractMetadata.desc:将抽取插件中所有抽取功能聚集到一起的基本插件  

AutoExtractMetadata.extracting:提取  

AutoExtractMetadata.first:以逗号间隔的一组数字，指定从文本起始提取的字符集，所提取出的内容保存到一组名为'FirstN'的元数据字段中，其中的N代表抽取的字符数。比如，值“3,5,7”将抽取起始的3，5和7个字符并分别保存到名为”First3“，”First5“和”First7“的元数据字段中。  

BaseMediaConverter.desc:提供媒体转换插件比如ImageConverter和视频转换的基本功能的插件。  

BaseImporter.associate_ext:使有着同样根文件名的文件  

BaseImporter.associate_tail_re:匹配文件名的正则表达式，筛选附属的文件。这个选项替换associate_ext，且更有效。  

CommonUtil.block_exp:与该正则表达式匹配的文件不会被传到插件集中列在后面的插件。  

BaseImporter.desc:适用所有输入插件的基类  

BaseImporter.dummy_text:该文档无内容  

CommonUtil.encoding.ascii:简易7比特ASCII。这也许要比用iso_8895_1快些。当文本可能含有简易7比特ASCII字符集之外的字符时（比如有重音符号的德文或法文），使用iso_8859_1。  

CommonUtil.encoding.unicode:只是统一的字符编码标准  

CommonUtil.encoding.utf8:utf8和统一的字符编码标准二者之一 －自动辨识。  

CommonUtil.filename_encoding:源文件名称的编码。  

CommonUtil.filename_encoding.auto:自动检测文件名的编码。  

CommonUtil.filename_encoding.auto_language_analysis:分析并自动检测文件名编码。  

CommonUtil.filename_encoding.auto_filesystem_encoding:用文件系统编码自动检测文件名编码。  

CommonUtil.filename_encoding.auto_fl:使用文件系统编码以及语种分析来检测文件名编码。  

CommonUtil.filename_encoding.auto_lf:使用语种分析以及文件系统编码来检测文件名编码。  

CommonUtil.no_blocking:不进行任何文件屏蔽。任何附带的文件（比如网页中的图片）将被独立得添加到当前收藏。  

BaseImporter.no_cover_image:不查找prefix.jpg文件（prefix指当前处理中的文件的前缀）来作为封面图像。  

BaseImporter.OIDtype.auto:使用import.pl中设置的OIDtype  

BaseImporter.process_exp:一个与文件名相匹配的perl规则表述。文件名的匹配将由该插件处理。例如，用'(?i).html?\$' 匹配以.htm or .html结尾的所有文档(区分大小写)。  

BaseImporter.smart_block:使用比仅仅考虑文件名更好的办法阻止文件。  

BaseImporter.stems:词干  

BaseImporter.file_rename_method:重命名已导入文件和附属文件名称的方法。  

BaseImporter.rename_method.url:使用url编码对已导入和附带文件重命名。  

BaseImporter.rename_method.base64:使用base64编码对已导入和附带文件重命名。  

BaseImporter.rename_method.none:不对已导入和附带文件进行重命名。  

BibTexPlugin.desc:BibTexPlugin读入BibTex格式的书目摘要。BibTexPlugin为文件中的每条书目创建一个文档对象。它是SplitTextFile的子类，所以如果存在多条记录，则全部读取。  

BookPlugin.desc:从含有<<TOC>>层级标记的文档中创建多级文档。每个段落的元数据取自任何与<<TOC>>在同一行的其他标记。例如<<Title>>xxxx<</Title>>将设定题名元数据。<<TOC>>标记符之间的所有其他内容视为简单html（即不处理html链接或其他HTMLPlugin类的处理）。 期望的输入文件的缺省文件扩展名为.hb（该选项可通过加入-process_exp选项进行更改）。与hb文件同名的.jpg文件将被作为文档的封面图像（本插件屏蔽jpg文件）。BookPlugin是Humanity Library馆藏用到的HBPlugin的简化（及扩展）。BookPlugin的处理比较快因为它所期望比较干净的输入文件 （HDL馆藏的输入部分含有许多围绕<<TOC>>标签的html标签，使用<<I>>标签来指定图像, 且用<<TOC>>标签与文本起始处之间的内容作为标题元数据）。如果要令文档显示成与HDL馆藏一样的形式，应使用本插件而不是HBPlugin。  

CONTENTdmPlugin.desc:本插件处理导出CONTENTdm馆藏中的RDF文件。  

ConvertBinaryFile.apply_fribidi:在转换的文件上运行”fribidi“统一编码双向算法（适用于右至左文本）。  

ConvertBinaryFile.convert_to:转换成TEXT或HTML或其他种类图像的插件（如JPEG,GIF,PNG)。  

ConvertBinaryFile.convert_to.auto:自动选择要转换的格式。所选格式取决于输入文档的类型，比如Word文档会转换成HTML格式，而PowerPoint文档将转换成Greenstone的PagedImage（分页图片）格式。  

ConvertBinaryFile.convert_to.html:HTML格式。  

ConvertBinaryFile.convert_to.text:简易文本格式。  

ConvertBinaryFile.convert_to.pagedimg:一系列的图片。  

ConvertBinaryFile.convert_to.pagedimg_jpg:JPEG格式。  

ConvertBinaryFile.convert_to.pagedimg_gif:GIF格式。  

ConvertBinaryFile.convert_to.pagedimg_png:PNG格式。  

ConvertBinaryFile.desc:该插件由WordPlugin、PowerPointPlugin、PostScriptPlugin、RTFPlugin及PDFPlugin继承。用于把这些文档类型转换成HTML、TEXT或图像系列。其工作原理是根据该插件的‘convert_to’选项动态读取相应的二级插件（HTMLPlugin、StructuredHTMLPlugin、PagedImagePlugin或TextPlugin）。  

ConvertBinaryFile.keep_original_filename:保留关联文件的原始文件名，而不是转换成doc.pdf，doc.doc等。  

ConvertBinaryFile.use_strings:如果设定的话，当转换无法进行时一个简单的字符串函数会被用来提取文本。  

ConvertToRogPlugin.desc:由RogPlugin继承来的插件。  

CSVPlugin.desc:用于逗号分隔格式的值的插件。会为文件的每一行创建一个新文档。  

DateExtractor.desc:辅助抽取插件，用来抽取文本中的历史日期信息。  

DateExtractor.extract_historical_years:从历史文档中提取有关时间区间的信息。该信息是作为文档的metadata存储的。有一个界面可用于搜索该metadata。在收藏配置文件中写入"format QueryInterface DateSearch"语句即可将该界面加入相关收藏。  

DateExtractor.maximum_century:提取最大的经过命名的世纪作为历史metadata（例如14，即提取截至14世纪所有的参考资料）  

DateExtractor.maximum_year:用于metadata的最大的历史上的日期（以基督时代为准，如1950）  

DateExtractor.no_bibliography:当提取历史日期时，不要试图阻止书目提要日期。  

DirectoryPlugin.desc:RecPlug插件可处理它在嵌套目录中发现的每一个文件。  

DirectoryPlugin.recheck_directories:当一个输入目录中的所有文件处理完毕后，重新读取目录以发现任何新创建的文件。  

DirectoryPlugin.use_metadata_files:不赞成使用－请添加MetadataXMLPlugin以便从元数据XML文件中读取元数据。  

DatabasePlugin.desc:本插件从数据库中导入记录。本插件使用perl的DBI模块，它含有mysql、postgresql、逗号分隔值（CSV）、MS Excel、ODBC、sybase等等的后端。使用本插件需要安装额外的模块。参见<GSDLHOME>/etc/packages/example.dbi中的示范配置文件。  

DSpacePlugin.desc:DSpacePlug 接受从Dspace中输出的收藏并输入给Greenstone。  
	
DSpacePlugin.first_inorder_ext:本选项用于识别一个Dspace馆藏文档的主文档。若设定本选项，系统将按顺序使用本选项中定义的文件扩展类型来寻找主文档文件。  

DSpacePlugin.first_inorder_mime:本选项用于识别一个Dspace馆藏文档的主文档。若设定本选项，系统将按顺序使用本选项中定义的mime类型来寻找主文档文件。  

DSpacePlugin.only_first_doc:本选项用于识别一个Dspace馆藏文档的主文档。若设定本选项，都柏林核心元数据文件中引用的第一个文档将被作为主文档文件。  

EmailAddressExtractor.desc:辅助抽取插件，用来抽取文本中的email地址。  

EmailAddressExtractor.done_email_extract:完成提取电子邮件地址  

EmailAddressExtractor.extracting_emails:提取电子邮件地址  

EmailAddressExtractor.extract_email:提取电子邮件地址并作为metadata  

EmailPlugin.desc:EmailPlug读取电子邮件文件。这些文件会用简单数字命名（即，它们出现在maildir文件夹中）或具有.mbx文件扩展名 (对于mbox邮件文件格式)。文档文本: 文档中第一个空白行后面的所有文本。Metadata (非Dublin Core!):$Headers 所有的页首内容（可选择的，假定条件下不存储）:$Subject Subject: 页首$To To: 页首$From From: 页首$FromName 发送人姓名 (如果有的话)$FromAddr 发送人电邮地址$DateText     Date: 页首$Date 日期: GSDL格式的页首 (例如: 19990924)  

EmailPlugin.no_attachments:不要存储信息附件。  

EmailPlugin.headers:将电子邮件页首存储为”Headers“metadata。  

EmailPlugin.OIDtype.message_id:将消息标识用作文档OID。如果没有消息标识，则用哈希OID。  

EmailPlugin.split_exp:用于将含有多项信息的文件分割成独立文档的perl规则表述。  

ExcelPlugin.desc:用于输入Microsoft Excel文件的插件（95及97版）。  

FavouritesPlugin.desc:本插件处理英特网浏览器的收藏文件。  

FOXPlugin.desc:本插件处理Foxbase dbt文件。本插件只提供读取dbt和dbf文件及处理记录的基本功能。对处理具体数据库中的字段，则需要在这个通用插件的基础上进行定制。  

GreenstoneXMLPlugin.desc:处理Greenstone Archive XML文档。注意该插件不作语法检查（尽管XML:Parser模块测试格式的完好性）。这里假定Greenstone Archive文件符合其DTD。  

GISExtractor.desc:具GIS功能的BasPlug的辅助基类  

GISExtractor.extract_placenames:从文本中提取地点名称并设为metadata。要求有Greenstone的GIS扩展。  

GISExtractor.gazetteer:使用Gazetteer从文本中提取地点名称并设为metadata。要求有Greenstone的GIS扩展。  

GISExtractor.place_list:当提取地点时，将地点名称集包括在文档的起始处。要求有Greenstone的GIS扩展。  

HBPlugin.desc:本插件用于处理HTML书目录。本插件主要用于Humanity Development Library馆藏且只处理ASCII和扩展ASCII编码。本插件的运行速度有很大的提升空间，我们更希望鼓励用户使用BookPlugin来创建他们自己的收藏。\n\n尽量使用BookPlugin来生成新的收藏以及处理类似Humanity Library馆藏文件的有标注的文件。BookPlugin接受所有输入编码但要求文件中的标注比Humanity Library馆藏中的整洁。  

HBPlugin.encoding.iso_8859_1:拉丁1（西方语言）  

HTMLImagePlugin.aggressiveness:可用的文本提取范围。  
HTMLImagePlugin.aggressiveness.1:仅文件名、路径、替换文本（HTML img 标签的ALT属性）。  
HTMLImagePlugin.aggressiveness.2:1中的全部，加上可抽取的标题。  
HTMLImagePlugin.aggressiveness.3:2中的全部，加上可抽取的附近段落。  
HTMLImagePlugin.aggressiveness.4:3中的全部，加上可抽取的以前的页首（<h1>,<h2>…)。  
HTMLImagePlugin.aggressiveness.5:4中的全部，加上可抽取的文本参考。  
HTMLImagePlugin.aggressiveness.6:4中的全部，加上HTML页面中的meta标签（标题，关键词等）。  
HTMLImagePlugin.aggressiveness.7:4，5和6的组合。  
HTMLImagePlugin.aggressiveness.8:7中的全部，以及重复文件名、路径、替换文本和标题（来提升其在相关结果中的排序）。  
HTMLImagePlugin.aggressiveness.9:1中的全部，加上源页面的全部文本。  

HTMLImagePlugin.caption_length:标题说明的最大长度（以字母计）。  

HTMLImagePlugin.convert_params:用于ImageMagicK略图创建转换的额外参数。例如，'-raise'将在缩略图上添加三维效果。  

HTMLImagePlugin.desc:本插件用于从网页提取图像及关联文本。  

HTMLImagePlugin.document_text:添加图像文本作为document:text（否则作为IndexedText元数据字段）。  

HTMLImagePlugin.index_pages:将页面与图像一起编入索引。否则在源文档的URL中引用该页面。  

HTMLImagePlugin.max_near_text:从图像附近提取的字母的最大数目。  

HTMLImagePlugin.min_height:以象素为单位。略过少于该选项的图像。  

HTMLImagePlugin.min_near_text:在文本或标题说明附近允许提取的最少字母。  

HTMLImagePlugin.min_size:以字节为单位。略过大小小于该选项的图像。  

HTMLImagePlugin.min_width:以象素为单位。略过窄于该选项的图像。  

HTMLImagePlugin.neartext_length:附近文本的目标长度（以字母计）。  

HTMLImagePlugin.no_cache_images:不要缓存图像（指向原始图像的URL）。  

HTMLImagePlugin.smallpage_threshold:页面上小于指定字节的图像会被加入该页面的元数据（标题，关键词等）。  

HTMLImagePlugin.textrefs_threshold:文本引用的界限值。较低的值意味着不很严格的算法。  

HTMLImagePlugin.thumb_size:最大的略图尺寸：宽和长。  

HTMLPlugin.assoc_files:与html文档相关联的文件扩展名的perl规则表述。  

HTMLPlugin.desc:该插件处理HTML文件。  

HTMLPlugin.description_tags:在<Section>标签出现的地方分割文档。在该选项设定的情况下，'-keep_head'不起作用。  

HTMLPlugin.extract_style:从HTML<head>标签提取格式及脚本信息并存储成DocumentHeader metadata。这会在文档页面中以_document:documentheader_ macro的形式设定。  

HTMLPlugin.file_is_url:如果输入文件名构成源文档的url的一部分则设定该域，例如当一个网页镜像工具被用于生成输入目录结构时。  

HTMLPlugin.hunt_creator_metadata:尽可能发现更多的有关作者身份的metadata并存放在'Creator'域中。  

HTMLPlugin.keep_head:不要从html文件中去除页首。  

HTMLPlugin.metadata_fields:试图提取的逗号分隔的metadata域的集。用'tag<tagname>'得到存放在名为'tagname'的metadata元素的第一个<tagname>标签组的内容。因为标签提取不考虑大小写，须将该域象大写Greenstone中的metadata一样大写才有效。  

HTMLPlugin.no_metadata:不要试图从文件中提取任何metadata。  

HTMLPlugin.no_strip_metadata_html:逗号分隔的metadata名称的集，或'all'。与-description_tags一起使用，它会防止从设定的metadata的值中剥离HTML标签。  

HTMLPlugin.nolinks:不要试图限制链接（设定该标记可提高创建/输入的速度但会使文档中的相对链接失去作用。  

HTMLPlugin.no_image_links:不处理图片链接和图片预览  

HTMLPlugin.rename_assoc_files:重命名与文档相关联的文件（如图像）。同样生成更浅的目录结构（当创建cd-rom收藏时较有用）。  

HTMLPlugin.sectionalise_using_h_tags:用h1,h2,…,hX标签自动生成段落文档。  

HTMLPlugin.title_sub:用于修改存储为标题的字符串的替换表达式。比如PDFPlugin用它从标题文本中清除”Page 1“等。  

HTMLPlugin.tidy_html:设定后会将HTML文档转换为对称的XHTML。用户从而可用书本格式查看文档。  

HTMLPlugin.old_style_HDL:标注是否该收藏中的文件用旧的HDL段落格式段落化。  

BaseMediaConverter.enable_cache:自动缓存生成的文件（比如缩略图和屏幕大小的图片）以便不需要重复生成这些文件。  

ImageConverter.converttotype:转换主图像至格式's'。  

ImageConverter.create_screenview:若设置为真，则创建一个屏幕大小的图片，并设置Screen, ScreenType, screenicon, ScreenWidth, ScreenHeight元数据。  

ImageConverter.create_thumbnail:若设置为真，则为每个图片创建一个缩略图，并设置Thumb, ThumbType, thumbicon, ThumbWidth, ThumbHeight元数据。  
ImageConverter.desc:该插件处理图像，添加基本的metadata。  

ImageConverter.imagemagicknotinstalled:Image Magick没有安装  

ImageConverter.minimumsize:忽略小于n比特的图像。  

ImageConverter.noconversionavailable:图片转换功能不可用  

ImageConverter.noscaleup:生成略图时不要放大小图像。  

ImageConverter.screenviewsize:生成大小为nxn的屏幕图像。  

ImageConverter.screenviewtype:生成格式为's'的屏幕图像。  

ImageConverter.thumbnailsize:生成大小为nxn的略图。  

ImageConverter.thumbnailtype:生成格式为's'的略图。  

ImageConverter.win95notsupported:Win95/98不支持Image Magick  

ImagePlugin.desc:该插件处理图像，添加基本的metadata。  

IndexPlugin.desc:该嵌套插件处理一个index.txt文件。该index.txt文件应含有将被包括在收藏中的文件集，紧接该集的是与每个文件相关联的额外的metadata。该index.txt文件须为以下格式：第一行应是一个关键词(以key:开始），用于命名metadata域（例如，key: Subject Organization Date)。接下来是文件名以及为metadata条目所设的值（例如，当使用上例的关键词行时，'irma/iw097e 3.2 unesco 1993'将把metadata Subject=3.2, Organization=unesco, 及 Date=1993与文件irma/iw097e相关联)。注意如果任何metadata域使用了Hierarchy分类器插件，则所设值应与相应分类文件中的第一个域（描述者）相对应。Metadata的值可用标签分别命名（例如 <Subject>3.2)，这将覆盖所有由关键词行赋予它们的名字。如果关键词行不存在，所有未命名的metadata值将被命名未‘Subject'。  

ISISPlugin.desc:该插件处理CDS/ISIS数据库。对于每个被处理的CDS/ISIS数据库，收藏的输入文件夹中必须含有以下三个文件：主文件（.mst),域定义表 (.fdt), 以及参照文件 (.xrf)。  

ISISPlugin.subfield_separator:CDS/ISIS数据库记录中用于分隔子域的多个值的字符串。  

ISISPlugin.entry_separator:CDS/ISIS数据库记录中用于分隔单个metadata域的多个值的字符串。  

KeyphraseExtractor.desc:辅助抽取插件，用于从文本中抽取关键词组。使用Kea关键词组抽取系统。  

KeyphraseExtractor.extract_keyphrases:使用Kea自动提取关键词语（假定设置）  

KeyphraseExtractor.extract_keyphrases_kea4:使用Kea 4.0自动提取关键词语（假定设置）。Kea 4.0是Kea的新版本，用于控制编制农业领域的文档。  

KeyphraseExtractor.extract_keyphrase_options:用于关键词语提取的Kea选项。例如：mALIWEB - 使用 ALIWEB 提取模式; n5 - 提取5个关键词语;, eGBK - 使用 GBK 编码。  

KeyphraseExtractor.keyphrases:关键词语  

KeyphraseExtractor.missing_kea:错误：％s中无法找到Kea软件。请从http://www.nzdl.org/Kea下载Kea％s并安装到该目录下。  

LaTeXPlugin.desc:用于LaTex文档的插件。  

LOMPlugin.desc:用于输入LOM（Learning Object Metadata)的插件。  

LOMPlugin.root_tag:XML文件的DocType(或一个与根元素匹配的规则表述）。  

LOMPlugin.check_timestamp:查看以前下载的文件的时间标记，且仅在源文件较新时才重新下载。  

LOMPlugin.download_srcdocs:如果设定的话则下载源文档（通常标志符条目或技术位置）。该选项应指定一个规则表述来匹配所要下载的文件名。注意，该域目前只对防火墙外边的文档有效。  

MARCPlugin.desc:基本的MARC插件。  

MARCPlugin.metadata_mapping:文件名，该文件中有从MARC值到Greenstone元数据名的映射。缺省值是当前站点etc目录下的'marc2dc.txt'文件。  

MARCXMLPlugin.desc:MARCXML插件。  

MARCXMLPlugin.metadata_mapping_file:文件名，该文件中有从MARC值到Greenstone元数据名的映射。缺省值是当前站点etc目录下的'marc2dc.txt'文件。  

MediaWikiPlugin.desc:用于输入MediaWiki网页的插件。  

MediaWikiPlugin.show_toc:添加到收藏的About页，即MediaWiki网站的主页的'table of contents'。须在toc_exp以下指定一个Perl规则表述以匹配'table of contents'段落。  

MediaWikiPlugin.delete_toc:删除每个HTML页的'table of contents'段落。须在toc_div_exp以下指定一个Perl规则表述以匹配'table of contents'段落。  

MediaWikiPlugin.toc_exp:用于匹配'table of contents'的Perl规则表述。缺省值将匹配一般的MediaWiki网页。  

MediaWikiPlugin.delete_nav:删除导航段落。须在nav_div_exp以下指定一个Perl规则表述。  

MediaWikiPlugin.nav_div_exp:用于匹配导航段落的Perl规则表述。假定值与通用MediaWiki网页相匹配。  

MediaWikiPlugin.delete_searchbox:删除搜索框段落。须在searchbox_div_exp以下指定一个Perl规则表述。  

MediaWikiPlugin.searchbox_div_exp:用于匹配搜索框段落的Perl规则表述。假定值与通用MediaWiki网页相匹配。  

MediaWikiPlugin.remove_title_suffix_exp:用于修剪提取的标题的Perl规则表述。例如，\\s-(.+)将修剪"-"之后的标题内容。  

MetadataCSVPlugin.desc:用于处理逗号分隔的值的格式的metadata的插件。CSV文件中的文件名部分用于决定metadata属于哪个文档。  

MetadataPass.desc:BasPlugin的辅助基类，支持元数据插件使用import.pl的metadata_read。  

MetadataXMLPlugin.desc:本插件处理metadata.xml文件。  

MetadataEXIFPlugin.desc:本插件从图片、音频和视频中抽取EXIF元数据。更具体的，这是以CPAN模块‘ExifTool’为基础。这个模块实际上也支持其他格式（比如GPS、XMP、FlashPix、ID3、Vorbis）。本插件的目标是支持所有ExifTool支持的格式。关于ExifTool所支持的文件类型和元数据集请参见其文档。  

GreenstoneMETSPlugin.desc:处理Greenstone风格的METS文档。  

MP3Plugin.desc:处理MP3文件的插件。  

MP3Plugin.assoc_images:根据ID3 Title及Artist metadata，使用Google图像搜索来定位与MP3文件相关的图像。  

MP3Plugin.applet_metadata:用于存储每个文档的【applet】metadata，文档含有必要的可令MP3音频播放器小程序播放该文件的HTML。  

MP3Plugin.metadata_fields:从MP3文件中提取逗号分隔的metadata域的集。使用\“*\"提取所有域。  

NulPlugin.desc:虚拟（.nul)文件插件。与激发metadata数据库文件所产生的文件同时使用。  

NulPlugin.assoc_field:为每个无效文件设定的metadata域的名字。  
NulPlugin.add_metadata_as_text:添加一个metadata表格用作文档的文本，免得显示”This document has no text"。  

NulPlugin.remove_namespace_for_text:从文档文本中的metadata名字中去除名字区间（如果add_metadata_as_text已设定）。  

OAIPlugin.desc:基本Open Archive Initiative(OAI)插件。  

OAIPlugin.document_field:本元数据用于指定当前元数据应附属的文档名称  

OAIPlugin.metadata_set:导入所有元数据到这个元数据集（命名域前缀）  
OAIPlugin.metadata_set.auto:使用OAI记录中指定的前缀  
OAIPlugin.metadata_set.dc:使用dc前缀。将限定性dc元素映射到其Greenstone格式，比如spatial将被映射成dc.Coverage^spatial.  

OggVorbisPlugin.add_technical_metadata:添加技术（例如比特率）metadata。  

OggVorbisPlugin.desc:用于输入Ogg Vorbis 音频文件的插件。  

OpenDocumentPlugin.desc:处理OASIS OpenDocument格式文档的插件（用于OpenOffice 2.0)。  

PagedImagePlugin.desc:处理由一连串图像组成的文档的插件，每个图像带有可选的OCR文本。该插件处理.item文件，该类文件列出连续图像及文本文件并提供metadata。  

PagedImagePlugin.documenttype:设定文档类型（用于显示）。  

PagedImagePlugin.documenttype.paged:分页的文档含有向前和向后的箭头以及'go to page X' 框。  

PagedImagePlugin.documenttype.hierarchy:层级文档含有文章目录。  

PagedImagePlugin.headerpage:为每个文档添加一个顶级页首页（不含图像）。  

PDFPlugin.allowimagesonly:允许PDF文件不含可提取文本。免得设定-complex选项。仅用于convert_to_html。  

PDFPlugin.complex:生成更复杂的输出。设定该选项会使输出的html更象原始PDF文件。该选项要求安装Ghostscript（对于*nix，gs必须位于系统路径；对于Windows，gswin32c.exe设定在系统路径中）。  

PDFPlugin.desc:处理PDF文档的插件。  

PDFPlugin.nohidden:阻止pdftohtml提取隐藏文本。这只在-complex选项也设定的情况下有用。  

PDFPlugin.noimages:不要试图从PDF中提取图像。  

PDFPlugin.use_sections:为每个PDF文件的页面创建一个单独的段落。  

PDFPlugin.zoom:输出时放大PDF文件的系数（这只在-complex选项也设定的情况下有用）。  

PostScriptPlugin.desc:这是一个\"poor man\"的ps至文本转换器。如果你想使用高级的功能，可以考虑PRESCRIPT包，可从http://www.nzdl.org/html/software.html下载。  

PostScriptPlugin.extract_date:从PS页首提取日期。  

PostScriptPlugin.extract_pages:从PS页首提取页面。  

PostScriptPlugin.extract_title:从PS页首提取标题。
  

PowerPointPlugin.desc:本插件用于导入Microsoft PowerPoint文件。  

PowerPointPlugin.windows_scripting:使用Microsoft Windows 的脚本技术技术（Visual Basic应用程序）来将PPT转换成各种格式的图像（例如JPEG,PNG,GIF)，而不使用ppttohtml开源包。  

PrintInfo.bad_general_option:％s分类器使用了错误的选项。查看你的配置文件collect.cfg  

PrintInfo.desc:最基本插件，处理打印信息（使用pluginfo.pl）以及解析参数。  

ProCitePlugin.desc:用于ProCite数据库（输出的）的插件。  

ProCitePlugin.entry_separator:用来分隔ProCite数据库记录中单个元数据字段的多个值的字符串。  

ReadTextFile.could_not_extract_encoding:警告：无法从％s中提取编码－假定值％s  

ReadTextFile.could_not_extract_language:警告：无法从％s中提取语言－假定值％s  

ReadTextFile.could_not_open_for_reading:无法打开％s进行读取  

ReadTextFile.default_encoding:如果-input_encoding选项设为‘auto’且文本分类算法不能编码或提取了不被Greenstone支持的编码，则使用该编码。该选项可采用与-input_encoding选项相同的值。  

ReadTextFile.default_language:如果Greenstone无法确认某个文本的语言，'Language'metadata设为该值。其假定值是'en' (使用ISO 639: en = English)。请注意，如果-input_encoding选项未设成‘auto’且未设-extract_language选项，则所有文本的‘language'metadata皆设为该值。  

ReadTextFile.desc:用于处理纯文本文件的基本插件。  

ReadTextFile.empty_file:该文件无内容  

ReadTextFile.extract_language:鉴别每个文档的语言并设定’Language'metadata。注意，如果 -input_encoding设为‘auto'，该过程会自动完成。  

ReadTextFile.file_has_no_text:错误：％s不含文本  

ReadTextFile.input_encoding:源文档的编码。文档将用这些编码进行转换并在内部存储为utf8。  

ReadTextFile.input_encoding.auto:使用文本分类算法自动鉴别每个源文档的编码。这要比明确设定编码慢，但适用于同一收藏设定了多个编码。  

ReadTextFile.read_denied:对于％s读取权限被拒绝。  

ReadTextFile.separate_cjk:在中文/日文/韩文中插入空格令每个字母成为一个词。适用于当文本未被分割时。  

ReadTextFile.unsupported_encoding:警告：％s似乎使用了不被支持的编码（％s）－使用％s  

ReadTextFile.wrong_encoding:警告：％s用％s读入但似乎作为％s编码  

ReadXMLFile.desc:用于XML插件的基类。  

ReadXMLFile.xslt:用指定文件中的XSLT转换匹配的输入文档。假定一个相对的文件名会在收藏的文件区域找到，例如，etc/mods2dc.xsl。  

RealMediaPlugin.desc:处理Real Media文件的插件。  

ReferPlugin.desc:ReferPlugin读入Refer格式的目录文献文件  

RogPlugin.desc:从.rog或.mdb文件创建简单单级文档。  

RTFPlugin.desc:用于输入Rich Text 格式的文件。  

SourceCodePlugin.desc:文件名目前被用于标题（可选择减去一些前缀）。当前语言:\n文本：READMEs/Makefiles\nC/C++   (目前仅提取包含语句以及C++ 类)\nPerl    (目前仅处理文本)\nShell   (目前仅处理文本)  

SourceCodePlugin.remove_prefix:从文件名中删除前缀（例如-remove_prefix /tmp/XX/src/)。假定条件下是从文件名中删除全部路径。  

SplitTextFile.desc:SplitTextFile是一个将输入文件分割成若干部分的插件，每个部分都将被单独处理。本插件不应该被直接调用。相反，如果你需要处理含有多个文档的文件，应该编写自己的插件，其中的处理（process）函数将处理单个文档，并使其继承SplitTextFile。参见ReferPlugin，作为一个范例。  

SplitTextFile.split_exp:将输入文件分割成段的perl规则表述。  

StructuredHTMLPlugin.desc:一个处理结构性HTML文档的插件，基于格式信息将它们分割成段落。  

StructuredHTMLPlugin.delete_toc:从转换的HTML文件中删除所有文章目录，图表等。其格式由toc_header选项指定。  

StructuredHTMLPlugin.title_header:用于标题页首的可能的用户定义的格式。  

StructuredHTMLPlugin.level1_header:用于HTML文档中第一级页首的可能的用户定义的格式（相当于<h1>)。  

StructuredHTMLPlugin.level2_header:用于HTML文档中第二级页首的可能的用户定义的格式（相当于<h2>)。  

StructuredHTMLPlugin.level3_header:用于HTML文档中第三级页首的可能的用户定义的格式（相当于<h3>)。  

StructuredHTMLPlugin.toc_header:用于文章目录，图表等的可能的用户定义的格式，如果delete_toc设定，则删除。  

TextPlugin.desc:创建简单单级文档。用第一行文本作为标题metadata（不超过100个字母）。  

TextPlugin.title_sub:用于修改存储为标题的字符串的替换表达式。比如PostScriptPlugin用它从标题文本中清除”Page 1“等。  

UnknownPlugin.assoc_field:持有关联文件名的metadata域的名称。  

UnknownPlugin.desc:这是一个简单的用于输入Greenstone无法识别格式的文件的插件。将为每个文件产生一个虚构的文档，且该文件本身会被作为文档的\"关联文件\"传递给Greenstone。  

UnknownPlugin.file_format:文件类型（例如MPEG,MIDI,…)。  

UnknownPlugin.mime_type:文件的Mime类型（例如，图像/gif）。  

UnknownPlugin.process_extension:用该文件扩展处理文件。该选项是process_exp的替代选项，process_exp更简单但适应性不强。  

UnknownPlugin.srcicon:指定一个作为srcicon metadata的宏的名称（不加下划线）。  

WordPlugin.desc:用于输入Microsoft Word文档的插件。  

WordPlugin.windows_scripting:使用Microsoft Windows 脚本技术（Visual Basic应用程序）来得到Word从而把文档转换成HTML，而不是依赖于开源包WvWare。如Word应用程序未在运行，它可令其自动打开。  

WordPlugin.metadata_fields:该选项从用VB脚本转换来的HTML文档中获取metadata。它允许用户定义试图提取的逗号分隔的metadata域的集。用'tag<tagname>'得到存放在名为'tagname'的metadata元素的第一个<tagname>标签组的内容。因为标签提取不考虑大小写，须将该域象大写Greenstone中的metadata一样大写才有效。  

ZIPPlugin.desc:处理压缩的和/或存档的输入格式。目前处理的格式及文件扩展名有：\ngzip (.gz, .z, .tgz, .taz)\nbzip (.bz)\nbzip2 (.bz2)\nzip (.zip .jar)\ntar (.tar)。\n\n该插件要求以下的应用程序 (如果要处理相对应的格式的话）：\ngunzip (for gzip)\nbunzip (for bzip)\nbunzip2 \nunzip (for zip)\ntar (用于 tar文件)。

#
# Download module option descriptions
#

BaseDownload.desc:Download模块的基类  
BaseDownload.bad_general_option:%s下载模块使用了不恰当的选项。  
MediaWikiDownload.desc:用于从MediaWiki网站下载的模块。  
MediaWikiDownload.reject_filetype:忽略逗号分隔的url集，例如*cgi-bin*,*.ppt将忽略含有'cgi-bin'或'.ppt'的链接。  
MediaWikiDownload.reject_filetype_disp:忽略这些URL模式  
MediaWikiDownload.exclude_directories:欲排除目录的集（必须是到目录的绝对路径），例如 /people,/documentation将排除当前蠕动站点下的'people'和'documentation'子目录。  
MediaWikiDownload.exclude_directories_disp:排除这些目录  

OAIDownload.desc:用于从OAI知识库中下载的模块。  
OAIDownload.url_disp:源URL  
OAIDownload.url:OAI知识库URL  
OAIDownload.set_disp:限制于这个集合  
OAIDownload.set:仅下载知识库中指定的单元。  
OAIDownload.metadata_prefix_disp:元数据前缀  
OAIDownload.metadata_prefix:导出文档中使用的元数据格式，比如oai_de、qdc等等。点击<服务器信息>按钮查看所支持的格式。  
OAIDownload.get_doc_disp:获取文档。  
OAIDownload.get_doc:如果源文件已在记录中指定，下载它。  
OAIDownload.get_doc_exts_disp:只包括这些文件类型  
OAIDownload.get_doc_exts:允许访问的文件扩展名。  
OAIDownload.max_records_disp:要下载的记录的最大数量。  
OAIDownload.max_records:要下载的记录的最大数量。  

SRWDownload.desc:一个用于从SRW（搜索/获取网络服务）知识库下载的模块。  

WebDownload.desc:可用HTTP或FTP从Internet进行下载的模块。  
WebDownload.url:源URL。对于http重定向而言，这个值可能会有改变  
WebDownload.url_disp:源URL  
WebDownload.depth:下载时超链接的有效深度。  
WebDownload.depth_disp:下载深度。  
WebDownload.below:仅对该URL下的文件建立镜像。  
WebDownload.below_disp:仅下载该URL下的文件  
WebDownload.within:仅对同一站点的文件进行镜像。  
WebDownload.within_disp:仅下载站点内的文件
WebDownload.html_only:仅下载HTML文件，并忽略关联文件，例如图像和式样图表。  
WebDownload.html_only_disp:仅下载HTML文件  

WgetDownload.desc:处理wget调入的基类。  
WgetDownload.proxy_on:代理服务器正在运行  
WgetDownload.proxy_host:代理主机。  
WgetDownload.proxy_port:代理端口  
WgetDownload.user_name:用户名  
WgetDownload.user_password:用户密码  

Z3950Download.desc:用于从Z3950知识库下载的模块。  
Z3950Download.host:主机URL  
Z3950Download.host_disp:主机  
Z3950Download.port:知识库的端口值  
Z3950Download.port_disp:端口  
Z3950Download.database:在其中搜索记录的数据库。  
Z3950Download.database_disp:数据库  
Z3950Download.find:获取含有指定搜索词的记录。  
Z3950Download.find_disp:发现  
Z3950Download.max_records:下载的记录的最多数量。  
Z3950Download.max_records_disp:最多记录  


#
#Plugout option descriptions
#

BasPlugout.bad_general_option:％s plugout使用了错误的选项。  
BasPlugout.debug:设置调试模式  
BasPlugout.desc:适用于所有导出plugout的基类。  
BasPlugout.group_size:一个XML文件中应包含的文档数量。  
BasPlugout.gzip_output:使用gzip来压缩生成的xml文档（当从压缩文档构建收藏时不要忘记将ZIPPlug添加到插件列表中）。  
BasPlugout.output_handle:用于发送输出信息的文件描述器  
BasPlugout.output_info:arcinfo对象的引用，该arcinfo对象用于存储跟存档文件相关的信息。  
BasPlugout.verbosity:控制输出信息的数量。0＝无，3＝很多。  
BasPlugout.xslt_file:用指定文件的XSLT转换文档。  

DSpacePlugout.desc:Dspace Archive格式。  

FedoraMETSPlugout.desc:METS格式，使用Fedora格式。  
FedoraMETSPlugout.fedora_namespace:Fedora中用来处理ids（PIDS）的前缀，比如greenstone:HASH0122efe4a2c58d0  

GreenstoneXMLPlugout.desc:Greenstone XML 存档格式  

GreenstoneMETSPlugout.desc:METS格式，使用Greenstone格式。  

MARCXMLPlugout.desc:MARC xml 格式。  
MARCXMLPlugout.group:将marc xml记录输出到一个单独文件。  
MARCXMLPlugout.mapping_file:使用名称映射文件来做转换。  

METSPlugout.desc:用于METS格式的上级类导出插件。本插件提供用于GreenstoneMETS和FedoraMETS格式的常用功能，以及核心抽象方法。  
METSPlugout.xslt_txt:用指定文件中的XSLT转换mets的doctxt.xml文档。  
METSPlugout.xslt_mets:用指定文件中的XSLT转换mets的docmets.xml文档。  

#
# Perl module strings
#

classify.could_not_find_classifier:错误：无法找到分类器％s  

download.could_not_find_download:错误：无法找到下载模块％s  

plugin.could_not_find_plugin:错误：无法找到插件％s  

plugin.including_archive:包括1 ZIP/TAR存档的内容。  

plugin.including_archives:包括％d ZIP/TAR存档的内容。  

plugin.kill_file:被.kill文件清理的运程。  

plugin.n_considered:％d 文档被接受处理。  

plugin.n_included:％d 被处理且包括在收藏中。  

plugin.n_rejected:％d 被拒绝。  

plugin.n_unrecognised:％d 未知。  

plugin.no_plugin_could_process:警告：无插件可处理％s  

plugin.no_plugin_could_recognise:警告：无插件可识别％s  

plugin.no_plugin_could_process_this_file:无插件可处理此文件。  

plugin.no_plugin_could_recognise_this_file:无插件可识别此文件。  

plugin.one_considered:一个文档被接受处理。  

plugin.one_included:一个文档被处理且包括在收藏中。  

plugin.one_rejected:一个文档被拒绝。  

plugin.one_unrecognised:一个文档无法识别。  

plugin.see_faillog:见％s中一个无法识别的，及/或拒绝的文档。  

PrintUsage.default:假定条件  

PrintUsage.required:必要的  

plugout.could_not_find_plugout:错误：无法找到plugout\"％s\"  

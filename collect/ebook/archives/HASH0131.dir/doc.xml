<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE Archive SYSTEM "http://greenstone.org/dtd/Archive/1.0/Archive.dtd">
<Archive>
<Section>
  <Description>
    <Metadata name="gsdldoctype">indexed_doc</Metadata>
    <Metadata name="Language">en</Metadata>
    <Metadata name="Encoding">utf8</Metadata>
    <Metadata name="Title">Chapter Four</Metadata>
    <Metadata name="URL">http://C:/Program Files/Greenstone/tmp/F649.html</Metadata>
    <Metadata name="UTF8URL">http://C:/Program Files/Greenstone/tmp/F649.html</Metadata>
    <Metadata name="gsdlsourcefilename">import\Chapter Four.pdf</Metadata>
    <Metadata name="gsdlconvertedfilename">C:\Program Files\Greenstone\tmp\F649.html</Metadata>
    <Metadata name="OrigSource">F649.html</Metadata>
    <Metadata name="Source">Chapter Four.pdf</Metadata>
    <Metadata name="SourceFile">Chapter Four.pdf</Metadata>
    <Metadata name="Plugin">PDFPlugin</Metadata>
    <Metadata name="FileSize">741813</Metadata>
    <Metadata name="FilenameRoot">Chapter Four</Metadata>
    <Metadata name="FileFormat">PDF</Metadata>
    <Metadata name="srcicon">_iconpdf_</Metadata>
    <Metadata name="srclink_file">doc.pdf</Metadata>
    <Metadata name="srclinkFile">doc.pdf</Metadata>
    <Metadata name="NumPages">36</Metadata>
    <Metadata name="dc.Creator">kk</Metadata>
    <Metadata name="dc.Subject">civics</Metadata>
    <Metadata name="dc.Title">Chapter Four.pdf</Metadata>
    <Metadata name="dls.Organization">Social Science|Civics|Books</Metadata>
    <Metadata name="ex.ExifTool.ExifToolVersion">8.57</Metadata>
    <Metadata name="ex.File.Directory">C:\Program Files\Greenstone\collect\ebook\import</Metadata>
    <Metadata name="ex.File.FileModifyDate">2018:12:10 02:52:10-08:00</Metadata>
    <Metadata name="ex.File.FileName">Chapter Four.pdf</Metadata>
    <Metadata name="ex.File.FilePermissions">666</Metadata>
    <Metadata name="ex.File.FileSize">741813</Metadata>
    <Metadata name="ex.File.FileType">PDF</Metadata>
    <Metadata name="ex.File.MIMEType">application/pdf</Metadata>
    <Metadata name="ex.PDF.Author">user</Metadata>
    <Metadata name="ex.PDF.CreateDate">2018:08:07 22:15:06+03:00</Metadata>
    <Metadata name="ex.PDF.Creator">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.PDF.Language">en-US</Metadata>
    <Metadata name="ex.PDF.Linearized">false</Metadata>
    <Metadata name="ex.PDF.ModifyDate">2018:08:07 22:15:06+03:00</Metadata>
    <Metadata name="ex.PDF.PDFVersion">1.7</Metadata>
    <Metadata name="ex.PDF.PageCount">36</Metadata>
    <Metadata name="ex.PDF.Producer">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.PDF.TaggedPDF">true</Metadata>
    <Metadata name="ex.PDF.Title">Chapter Four</Metadata>
    <Metadata name="ex.XMP.CreateDate">2018:08:07 22:15:06+03:00</Metadata>
    <Metadata name="ex.XMP.Creator">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.XMP.CreatorTool">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.XMP.DocumentID">uuid:A92C9E61-BE49-4FFC-BC07-661BDAC745BD</Metadata>
    <Metadata name="ex.XMP.InstanceID">uuid:A92C9E61-BE49-4FFC-BC07-661BDAC745BD</Metadata>
    <Metadata name="ex.XMP.ModifyDate">2018:08:07 22:15:06+03:00</Metadata>
    <Metadata name="ex.XMP.Producer">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.XMP.Title">Chapter Four</Metadata>
    <Metadata name="ex.XMP.XMPToolkit">3.1-701</Metadata>
    <Metadata name="Identifier">HASH0131c69c2f0db7eb8173310c</Metadata>
    <Metadata name="lastmodified">1544439130</Metadata>
    <Metadata name="lastmodifieddate">20181210</Metadata>
    <Metadata name="oailastmodified">1545141366</Metadata>
    <Metadata name="oailastmodifieddate">20181218</Metadata>
    <Metadata name="assocfilepath">HASH0131.dir</Metadata>
    <Metadata name="gsdlassocfile">doc.pdf:application/pdf:</Metadata>
  </Description>
  <Content>
&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Chapter &lt;br /&gt;Four &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Discussion Points&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Interrupts &amp;amp; its &lt;br /&gt;processing&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• I/O Interfacing &amp;amp;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Address decoding&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• ADC and DAC&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Interrupts &amp;amp; &lt;br /&gt;I/O &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Interfacing&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;1July 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Interrupts&lt;br /&gt;• Capability to suspend the execution of running &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;program and execution of another program to &lt;br /&gt;fulfill specific requirement upon request&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The microprocessor stops executing its current &lt;br /&gt;program and calls a procedure (Interrupt Service &lt;br /&gt;routine) which “services” the interrupt &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• After finishing the second program, automatically &lt;br /&gt;return to the first program and start execution &lt;br /&gt;from where it was left&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• A special instruction --- IRET --- at the end of &lt;br /&gt;interrupt-service procedure returns execution to &lt;br /&gt;the interrupted main program&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;2july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Purpose of Interrupts&lt;br /&gt;• Interrupts are useful when interfacing I/O devices with low data-&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;transfer rates, like a keyboard or a mouse, in which case polling the &lt;br /&gt;device wastes valuable processing time&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The peripheral interrupts the normal application execution, &lt;br /&gt;requesting to send or receive data.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;For example:&lt;br /&gt;• If a person using the keyboard typed one character per second, the &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Microprocessor waited an entire second between each key stroke &lt;br /&gt;for the person to type another key. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• This process is such a tremendous waste of time that designers &lt;br /&gt;have developed another process called interrupt processing.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• interrupt processing allows the microprocessor to execute other &lt;br /&gt;program while the keyboard operator is thinking about what key to &lt;br /&gt;type next. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• As soon as the key is pressed, the keyboard interrupt controller &lt;br /&gt;interrupts the microprocessor. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;3july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;• Fig Above  shows a time line that indicates a typist typing &lt;br /&gt;data on a  keyboard, a printer removing data from the &lt;br /&gt;memory, and a program executing. &lt;br /&gt;•The program is the main program that is interrupted for &lt;br /&gt;each keystroke and each character print. &lt;br /&gt;•Note that the keyboard interrupt service routine, called by &lt;br /&gt;the keyboard interrupt, and the printer interrupt&lt;br /&gt;service procedure each take little time to execute.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;4july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Interrupt Types&lt;br /&gt;• 8086 interrupts can be classified into two types:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;– Internal (or) Software Interrupts are triggered by &lt;br /&gt;a software instruction and operate similarly to a &lt;br /&gt;jump or branch instruction.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;– External (or) Hardware Interrupts are caused by &lt;br /&gt;peripheral devices by sending a signal to  INTR pin&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;5july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Hardware interrupts&lt;br /&gt;• Hardware interrupts are generated by &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;hardware devices when something unusual &lt;br /&gt;happens.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;– key-press or a mouse move.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The two hardware interrupt pins INTR and NMI that &lt;br /&gt;request interrupts, and INTA to acknowledge the &lt;br /&gt;interrupt request&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The NMI input is often used for parity errors and &lt;br /&gt;system faults such as power failures. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;6july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;INTR and INTA&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The INTR pin is set by an external event and cleared &lt;br /&gt;inside the interrupt service procedure. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• This input is automatically disabled once it is &lt;br /&gt;accepted by the microprocessor and re-enabled by &lt;br /&gt;the IRET instruction at the end of the interrupt &lt;br /&gt;service procedure.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The microprocessor responds to the INTR input by &lt;br /&gt;pulsing the INTA output in anticipation of receiving &lt;br /&gt;an interrupt vector type number on data bus &lt;br /&gt;connection. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Example&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• In the 82C55 keyboard Interrupt whenever a &lt;br /&gt;key is typed, the INTR output becomes a logic &lt;br /&gt;1, requesting an interrupt through the INTR &lt;br /&gt;pin on the microprocessor. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The INTR pin remains high until the ASCII data &lt;br /&gt;are read from port A.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• In other words, every time a key is typed, the &lt;br /&gt;82C55 requests a type 40H interrupt through &lt;br /&gt;the INTR pin. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;8july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Interrupt service routine  (ISR)&lt;br /&gt;8086 get to  the Interrupt Service Routine by&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Loading its CS and IP registers with the address of ISR.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;8086 get the address of Interrupt Service Routine (ISR) &lt;br /&gt;from the IVT   (Interrupt Vector Table)&lt;br /&gt; It goes to specified memory location of the IVT to fetch four &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;consecutive bytes&lt;br /&gt;Higher two bytes to be used as CS&lt;br /&gt;Lower two bytes to be used as IP&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The first 1Kbytes of memory, from 00000 to 003FF, is set &lt;br /&gt;aside as a IVT for storing the starting addresses of up to 256 &lt;br /&gt;interrupt service routines&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The starting address of an ISR is often called interrupt &lt;br /&gt;vector or interrupt pointer.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Table is referred to as Interrupt-vector table or  &lt;br /&gt;Interrupt-pointer table.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;9july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;10july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Priorities of 8086 Interrupts&lt;br /&gt;Interrupt type Priority&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Divide Error, INT n, INT0 Highest &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;NMI&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;INTR&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Single Step lowest&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;11july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Interrupt Flag Bits &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The interrupt flag (IF) and the trap flag (TF) are &lt;br /&gt;both cleared after the contents of the flag &lt;br /&gt;register are stacked during an interrupt. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;– when IF is set, it allows the INTR pin to cause&lt;br /&gt;an interrupt&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;– when IF is cleared, it prevents the INTR pin&lt;br /&gt;from causing an interrupt&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;12july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Interrupt process&lt;br /&gt;If one or more of these interrupt conditions are present, the &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;following sequence of events occurs:&lt;br /&gt;• The contents of the flag register are pushed onto the stack.&lt;br /&gt;• Both the interrupt (IF) and trap (TF) flags are cleared. This &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;disables the INTR pin and also the trap or single-step &lt;br /&gt;feature.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The contents of the code segment register (CS) are pushed &lt;br /&gt;onto the stack.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The contents of the instruction pointer (IP) are pushed onto &lt;br /&gt;the stack.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The interrupt vector contents are fetched and placed into &lt;br /&gt;both IP and CS so that the next instruction executes at the &lt;br /&gt;interrupt service procedure addressed by the vector.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;13july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;14july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;I/O Interfacing and Address decoding&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• There are two different methods of interfacing&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;1. Isolated I/O: &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;– uses the IN, OUT, INS and OUTS instructions to &lt;br /&gt;transfer data to/from I/O device.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;– The I/O address space is separated from memory &lt;br /&gt;address space.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;– Memory or I/O  operations are indicated by M/IO &lt;br /&gt;control signal&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;15july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Memory Mapped I/O&lt;br /&gt;• There is only one single address space for both &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;memory and I/O.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Memory-mapped I/O does not use the IN, OUT, &lt;br /&gt;INS and OUTS instructions.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• It uses any instruction that transfers data &lt;br /&gt;between the microprocessor and memory&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Advantage: simple to implement in a program.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Disadvantage: it takes up a portion of the system &lt;br /&gt;memory and reduces the amount of memory &lt;br /&gt;available to applications.&lt;br /&gt;– This is the reason why if you install 4GB of RAM on a &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;PC, you cannot get the full 4GB&lt;br /&gt;16july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;PROGRAMMABLE PERIPHERAL &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;INTERFACE-8255&lt;br /&gt;Features:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• It is used to interface to the keyboard and a &lt;br /&gt;parallel printer port in PCs&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• PPI has 24 pins for I/O that are programmable &lt;br /&gt;in groups of 12 pins and has three distinct &lt;br /&gt;modes of operation. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• It has 24 I/O programmable pins like PA,PB,PC &lt;br /&gt;(3x8 pins).&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Suitable for all parallel port configurations&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;17july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Pin layout&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;18july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Pin Functions&lt;br /&gt;• Data bus(D0-D7):These are 8-bit bi-directional buses, &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;connected to 8088 data bus for transferring data.&lt;br /&gt;• CS: This is Active Low signal. When it is low, then data &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;is transfer from 8088.&lt;br /&gt;• Read: This is Active Low signal, when it is Low read &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;operation will start.&lt;br /&gt;• Write: This is Active Low signal, when it is Low Write &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;operation will start.&lt;br /&gt;• Address (A0-A1):This is used to select the ports. &lt;br /&gt;• RESET: This is used to reset the device. &lt;br /&gt;• PA0-PA7:It is the 8-bit bi-directional I/O pins used to send &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;or receive data to peripherals&lt;br /&gt;• PB0-PB7:Similar to PA&lt;br /&gt;• PC0-PC7:This is also 8-bit bidirectional I/O pins.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;19july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Programming 8255&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;20july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Formats of control register&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;•The control word register has two formats. The first &lt;br /&gt;format is valid for I/O modes of operation, i.e. modes 0, &lt;br /&gt;mode 1 and mode 2 while the second format is valid for &lt;br /&gt;bit set/reset (BSR) mode of operation. &lt;br /&gt;•All these modes can be selected by programming a &lt;br /&gt;register internal to 8255 known as CWR.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;21july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Operating modes of 8255&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Mode 0 (for groups A &amp;amp; B)- the most commonly &lt;br /&gt;used mode: All 12 bits of the group are simple &lt;br /&gt;inputs or simple latched outputs&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Mode 1 (for groups A &amp;amp; B)- is used occasionally to &lt;br /&gt;provide handshaking to an I/O device and &lt;br /&gt;operate asynchronously with the device. Most &lt;br /&gt;Port C bits are dedicated for handshake functions &lt;br /&gt;for the operation&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Mode 2 (for group A only- Group B not used)- is a &lt;br /&gt;bidirectional mode for Port A only (Port B is not &lt;br /&gt;used).    Port C provides handshaking signals.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;22july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;23july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Example: Programming the 82C55&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• To program the command &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;register of the 82C55 and select &lt;br /&gt;operation use command byte A&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• For example, to program all the ports&lt;br /&gt;as outputs and in mode 0 (the most &lt;br /&gt;common mode) use:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;MOV  AL,80H&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;MOV DX,COMMAND_PORT&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;OUT   DX,AL&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Command port= C6H&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Address decoding of I/O&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• I/O port address decoding is very similar to memory &lt;br /&gt;address decoding, especially for memory mapped I/O &lt;br /&gt;devices. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The main difference between memory decoding and &lt;br /&gt;isolated I/O decoding is the number of address pins &lt;br /&gt;connected to the decoder.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• We decode  A19-A0 for memory and A15-A0 for &lt;br /&gt;isolated I/O. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Decoding 8-Bit I/O Addresses the fixed I/O instruction &lt;br /&gt;uses an 8-bit I/O port address that appears on AI5-AO &lt;br /&gt;as OOOOH-OOFFH. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Also note that if the address is decoded as an 8-bit &lt;br /&gt;address, then we can never include I/O devices that &lt;br /&gt;use a 16-bit I/O address.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;25july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Example&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Consider the system that will only use I/O &lt;br /&gt;ports FOH-F7H for this decoder.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• This decoder is identical to a memory address &lt;br /&gt;decoder except we only connect address bits &lt;br /&gt;F0H-F7H to the inputs of the decoder.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;26july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Address decoding example&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;27july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;16 bit address decoder&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• We also decode 16-bit I/O addresses, &lt;br /&gt;especially in a personal computer system. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The main difference between decoding an 8-&lt;br /&gt;bit I/o address and a 16-bit I/O address is that &lt;br /&gt;eight additional address lines (A15-A8) must &lt;br /&gt;be decoded.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Consider to decode I/o ports EFF8H-EFFFH&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;28july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;16 bit address decoding&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;29july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;I/O Interfacing using 8255&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;30july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;31july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;ADC Interfacing&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• In most of the cases, the 8255 is used for interfacing &lt;br /&gt;the analog to digital converters with microprocessor.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The microprocessor sends an initializing signal to the &lt;br /&gt;ADC to start the analog to digital data conversation &lt;br /&gt;process.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• After conversion is over, the ADC sends end of &lt;br /&gt;conversion EOC signal to inform the microprocessor &lt;br /&gt;that the conversion is over and the result is ready at &lt;br /&gt;the output buffer of the ADC. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• These tasks of issuing an SOC pulse to ADC, reading &lt;br /&gt;EOC signal from the ADC and reading the digital output &lt;br /&gt;of the ADC are carried out by the CPU using 8255 I/O &lt;br /&gt;ports.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;32july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;ADC 0808 and 0809 &lt;br /&gt;• The analog to digital converter chips 0808 and &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;0809 are 8-bit CMOS, successive approximation &lt;br /&gt;converters. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• The conversion delay is 100μs at a clock &lt;br /&gt;frequency of 640 KHz, which is quite low as &lt;br /&gt;compared to other converters.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• These converters internally have a 3:8 analog &lt;br /&gt;multiplexer so that at a time eight different &lt;br /&gt;analog conversion by using address lines  A,  B &amp;amp; &lt;br /&gt;C. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;• Using these address inputs, multichannel data &lt;br /&gt;acquisition system can be designed using a single &lt;br /&gt;ADC.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;33july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;34july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;35july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;DAC Interfacing&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;36july 2018                         ADV Mpr&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;</Content>
</Section>
</Archive>

<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE Archive SYSTEM "http://greenstone.org/dtd/Archive/1.0/Archive.dtd">
<Archive>
<Section>
  <Description>
    <Metadata name="gsdldoctype">indexed_doc</Metadata>
    <Metadata name="Language">en</Metadata>
    <Metadata name="Encoding">utf8</Metadata>
    <Metadata name="Title">Chapter 3 Microprocessor 8085 Architecture</Metadata>
    <Metadata name="URL">http://C:/Program Files/Greenstone/tmp/F391.html</Metadata>
    <Metadata name="UTF8URL">http://C:/Program Files/Greenstone/tmp/F391.html</Metadata>
    <Metadata name="gsdlsourcefilename">import\chapter 1.pdf</Metadata>
    <Metadata name="gsdlconvertedfilename">C:\Program Files\Greenstone\tmp\F391.html</Metadata>
    <Metadata name="OrigSource">F391.html</Metadata>
    <Metadata name="Source">chapter 1.pdf</Metadata>
    <Metadata name="SourceFile">chapter 1.pdf</Metadata>
    <Metadata name="Plugin">PDFPlugin</Metadata>
    <Metadata name="FileSize">432504</Metadata>
    <Metadata name="FilenameRoot">chapter 1</Metadata>
    <Metadata name="FileFormat">PDF</Metadata>
    <Metadata name="srcicon">_iconpdf_</Metadata>
    <Metadata name="srclink_file">doc.pdf</Metadata>
    <Metadata name="srclinkFile">doc.pdf</Metadata>
    <Metadata name="NumPages">31</Metadata>
    <Metadata name="dc.Creator">zz</Metadata>
    <Metadata name="dc.Subject">History</Metadata>
    <Metadata name="dc.Title">chapter 1.pdf</Metadata>
    <Metadata name="dls.Organization">Social Science|History|Books</Metadata>
    <Metadata name="ex.ExifTool.ExifToolVersion">8.57</Metadata>
    <Metadata name="ex.File.Directory">C:\Program Files\Greenstone\collect\ebook\import</Metadata>
    <Metadata name="ex.File.FileModifyDate">2018:12:10 02:52:20-08:00</Metadata>
    <Metadata name="ex.File.FileName">chapter 1.pdf</Metadata>
    <Metadata name="ex.File.FilePermissions">666</Metadata>
    <Metadata name="ex.File.FileSize">432504</Metadata>
    <Metadata name="ex.File.FileType">PDF</Metadata>
    <Metadata name="ex.File.MIMEType">application/pdf</Metadata>
    <Metadata name="ex.PDF.Author">Maria</Metadata>
    <Metadata name="ex.PDF.CreateDate">2018:07:12 23:28:51+03:00</Metadata>
    <Metadata name="ex.PDF.Creator">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.PDF.Language">en-US</Metadata>
    <Metadata name="ex.PDF.Linearized">false</Metadata>
    <Metadata name="ex.PDF.ModifyDate">2018:07:12 23:28:51+03:00</Metadata>
    <Metadata name="ex.PDF.PDFVersion">1.7</Metadata>
    <Metadata name="ex.PDF.PageCount">31</Metadata>
    <Metadata name="ex.PDF.Producer">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.PDF.TaggedPDF">true</Metadata>
    <Metadata name="ex.PDF.Title">Chapter 3  Microprocessor 8085 Architecture</Metadata>
    <Metadata name="ex.XMP.CreateDate">2018:07:12 23:28:51+03:00</Metadata>
    <Metadata name="ex.XMP.Creator">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.XMP.CreatorTool">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.XMP.DocumentID">uuid:D146E229-08BC-4B22-BC3B-F96DBCC426C0</Metadata>
    <Metadata name="ex.XMP.InstanceID">uuid:D146E229-08BC-4B22-BC3B-F96DBCC426C0</Metadata>
    <Metadata name="ex.XMP.ModifyDate">2018:07:12 23:28:51+03:00</Metadata>
    <Metadata name="ex.XMP.Producer">Microsoft® PowerPoint® 2016</Metadata>
    <Metadata name="ex.XMP.Title">Chapter 3  Microprocessor 8085 Architecture</Metadata>
    <Metadata name="ex.XMP.XMPToolkit">3.1-701</Metadata>
    <Metadata name="Identifier">HASH647cfa4a68cb7c898f7e0e</Metadata>
    <Metadata name="lastmodified">1544439140</Metadata>
    <Metadata name="lastmodifieddate">20181210</Metadata>
    <Metadata name="oailastmodified">1545141391</Metadata>
    <Metadata name="oailastmodifieddate">20181218</Metadata>
    <Metadata name="assocfilepath">HASH647c.dir</Metadata>
    <Metadata name="gsdlassocfile">doc.pdf:application/pdf:</Metadata>
  </Description>
  <Content>
&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Advanced Microprocessor&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;1&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Course Objectives&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;2&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; To understand internal architectures of 8086&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; To understand concepts of Assembly language &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;programming using 8086 Microprocessor.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; To understand the organization of 8086, 80286, &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;386, 486 and Pentium based Processors.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; To understand the principles behind interfacing &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;components to a Processor.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; To understand the Instruction sets of 8086, 286, &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;386, 486 and Pentium processors&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Course contents&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;3&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; 8086/8088 Microprocessors&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Architecture of 8086/8088 Microprocessor &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Segmentation and Memory addressing in 8086/8088.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Assembly Language Programming&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Assembly Language programming: Data Transfer, Arithmetic and Logical &lt;br /&gt;Instructions &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Addressing Modes, Assemblers.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; String Instructions - Machine Control Instructions - Macros and &lt;br /&gt;Conditional Assembly.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Hardware Features of 8086/8088 and Memory Interfacing&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Features of 8086/8088 -Pin details, Clock generator, Min/Max modes. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Memory Interfacing, Address decoding &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Interrupts and I/O Interfacing&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Course contents…&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;4&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Interrupts and its processing. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; I/O Interfacing, Address decoding, ADC and DAC.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The 80186/286 Microprocessors&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The 80186, 80286 Microprocessors, Architectures and &lt;br /&gt;Instruction Sets.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Addressing Modes, Memory Management, Protection.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Assembly language syntax, Data Types &amp;amp; variables, Writing &lt;br /&gt;COM programs&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The 80386/486 Microprocessors&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The 80386/486 Microprocessor, Internal Architecture&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Memory Organization &amp;amp; Segmentation, Data Types, &lt;br /&gt;Registers, Addressing Modes, 80386 Modes&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;References&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;5&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Doughlas V Hall, Microprocessors and its &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Interfacing.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Barrey B. Brey, the Intel Microprocessor &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;8086/8088, 80186, 80286, 80386, 80486, &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Pentium and Pentium Pro-Processor -&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Evaluation Scheme&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;6&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Mid …………………….……..30%&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Projects/Assignments …………10%&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Lab practices and quizzes……..20%&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Final Examination…………….40%&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Chapter 1:8086/8088 Microprocessors&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Introduction&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The 8086 Internal architecture  &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;✓ The Execution Unit&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;✓ The Bus Interface Unit&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Segmentation and memory addressing&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Introduction&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;8&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The word Microprocessor is a  combination  of two &lt;br /&gt;words: &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ micro and processor.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ processor means a device which processes binary numbers &lt;br /&gt;(0’s and 1’s).&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Micro means small.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ A microprocessor is a multi-purpose, programmable,  &lt;br /&gt;integrated logic device that reads binary instructions &lt;br /&gt;from a  memory, accepts binary data as input and &lt;br /&gt;processes the data according to those instructions and &lt;br /&gt;provides result as an output&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Introduction: Evolution of Microprocessor ( Intel)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ 4004&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖First Microprocessor&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Introduced in 1971, 4-bit,   12-address lines(4kbytes), 740 KHz&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ 8008&lt;br /&gt;❖1972, 8-bit,  14-address lines ( 16kb), 500-800 KHz&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ It was not complete CPU-needs additional devices to form &lt;br /&gt;functional CPU.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ 8085 &lt;br /&gt;❖First 8-bit complete functional CPU.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ 8085 - 1976, 8-bits, 16-address lines (64Kb), 3-5 MHz, &lt;br /&gt;NMOS, 0.37 MIPS&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;9&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Evolution of Microprocessor ( Intel)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Limitations of the 8-bit MPs&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Low speed of execution&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Low memory addressing capability&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Limited number of general purpose registers&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Less powerful instruction set&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ No support  for pipelining or parallelism.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ These limitations led the designers to go for more powerful &lt;br /&gt;processors in terms of: &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Advanced architecture&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ More processing capability&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Larger memory addressing capability&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ More powerful instruction byte queue   &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The 8086 MP was the result of such developmental design effort.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;10&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Introduction to 8086 &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The 8086, announced in 1978, was the first 16-bit&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;microprocessor introduced by Intel Corporation.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ 8086 and 8088 are internally 16-bit MPs.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Externally the 8086 has a 16-bit data bus and the&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;8088 has an 8-bit data bus.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ 8086 has a 20 bit address bus and it can access up to &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;220 memory locations ( 1 MB) and 64K of I/O port.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The 8086 is housed in a 40-pin dual inline package &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;and many pins have multiple functions.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ It requires +5V power supply.&lt;br /&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;11&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Introduction to 8086 …&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ It provides 14, 16-bit registers.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ It has multiplexed address and data bus AD0- AD15 and &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;A16 – A19.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The 8086 manufactured using High-performance &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Metal-Oxide Semiconductor (HMOS) technology&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ 8086 is designed to operate in two modes, Minimum and &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Maximum.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ It can pre-fetches up to 6 instruction bytes from memory &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;and queues them in order to speed up instruction &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;execution.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;12&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;The 8088 microprocessor&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The microprocessor 8088 has all the programming &lt;br /&gt;facilities that 8086 has, along with some hardware &lt;br /&gt;features of 8086.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ It has 1Mbyte memory addressing capability, operating &lt;br /&gt;modes (MN/MX), interrupt structure.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ However 8088, unlike 8086, has 8-bit data bus.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Architecture of 8088:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The register set of 8088 is exactly the same as in to 8086.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The architecture of 8088 is also similar to 8086 except for &lt;br /&gt;two changes; &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;▪ 8088 has 4-byte instruction queue and, &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;▪ 8088 has 8-bit data bus.&lt;br /&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;13&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Internal architecture of 8086&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ 8086 MP is divided into two independent functional parts:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;✓ Bus interface unit (BIU)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;✓ Execution unit (EU)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Dividing the work b/n the two units speeds up the &lt;br /&gt;computation process.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The BIU performs all bus operations such as instruction&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;fetching, reading and writing operands from memory and &lt;br /&gt;calculating the addresses of the memory operands.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The fetched instruction bytes are transferred to the instruction &lt;br /&gt;queue.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ EU decodes and executes instructions from the instruction &lt;br /&gt;system byte queue.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;14&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Internal architecture of 8086…&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Both units operate asynchronously &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;✓ This gives the 8086 an overlapping instruction fetch and &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;execution mechanism&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;✓ This overlapping is called Pipelining. This results in &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;efficient use of the system bus and system performance.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ BIU contains Instruction queue, segment registers, &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;instruction pointer, address adder&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ EU contains control circuitery, instruction decoder, &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;ALU, pointer and Index register, flag register&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;15&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;BIU&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;B-Bus&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;EU&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;GPR&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Instruction &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Stream&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;byte queue&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;(6 bytes)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;CS&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;DS&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SS&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;ES&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;IP&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;A-Bus&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;AH&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;BH&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;CH&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;DH&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;AL&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;BL&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;CL&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;DL&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SP&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;BP&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SI&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;DI&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Control System&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;6&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;5&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;4&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;3&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;2&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;1&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Flags&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;ALU &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Memory &amp;amp; I/O Interface&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;20-bit address/ 16-bit data Bus&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;AX&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;BX&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;CX&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;DX&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;C-BUS&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Fig. The 8086 Architecture (Internal Block Diagram)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/201816&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Bus Interface Unit (BIU)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ This unit is responsible for establishing interface &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;with external devices including memory via the &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;bus.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ It provides a full 16 bit bidirectional data bus and 20 bit &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;address bus.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Functions of BIU:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;✓ Instruction fetch, Instruction queuing, Operand fetch and &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;storage, Address calculation and Bus control.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;✓ The BIU uses a mechanism known as an instruction stream &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;queue to implement a pipeline architecture&lt;br /&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;17&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;BIU …&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ This queue permits pre-fetch of up to six bytes of instruction &lt;br /&gt;code.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The BIU fetches and stores these pre-fetched bytes in a FIFO&lt;br /&gt;register called a queue.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ With its 16 bit data bus, the BIU fetches two instruction bytes &lt;br /&gt;in a single memory cycle.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ When the EU is ready for its next instruction, it simply reads &lt;br /&gt;the instruction byte(s) from the queue in the BIU.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ This overlapping of instruction fetch and execution speeds up &lt;br /&gt;the instruction execution process.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ This overlapping of machine cycles is called pipelining.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;18&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Segment Registers&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The 8086 BIU sends out 20-bits address. So it can address any &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;of 220 or 1MB in memory.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ At any given time the 8086 works with only four 65,536 &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;(64Kbytes) segments within this 1,048, 576 bytes range.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The following four segment registers in the BIU are used to &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;hold the upper 16-bits of the starting address of four memory &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;segments that the 8086 is working at a particular time:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;CS Code segment register&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SS Stack segment register&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;DS Data segment register&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;ES Extra segment register&lt;br /&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;19&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Physical address and segment registers&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The complete physical address which is 20-bits long is generated using segment &lt;br /&gt;and offset registers, each 16-bits long.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The BIU always inserts zeros for the lowest 4 bits (nibble) of the 20-bit starting &lt;br /&gt;address for a segment.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;N.B P.A=Physical Address&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❑ If CS register contains 348AH, then code segment will start at address 348A0 &lt;br /&gt;H.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;0011 0100 1000 1010    0000  = 0011 0100 1000 1010 0000 = 348A0H&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; In other words, a 64k bytes segment can be located anywhere within the 1Mb &lt;br /&gt;address space, but the segment will always start at an address with zeros in the &lt;br /&gt;lowest 4-bits. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❑ The IP contains the distance or offset from the base address to the next &lt;br /&gt;instruction byte to be fetched.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❑ An alternate way of representing a 20-bit physical address is &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Segment base : Offset&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Example: CS:IP i.e.   348A : 4214&lt;br /&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;20&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;21&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;The SS and SP registers&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;22&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❑ A stack is a part of memory to store addresses and &lt;br /&gt;data during subprogram processing. The 8086 &lt;br /&gt;allows an entire of 64Kb segment as a stack.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; SS - Stack segment register – holds the upper 16-&lt;br /&gt;bits of the starting address of the     &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;stack segment.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; SP- Stack pointer register– holds the 16-bit offset &lt;br /&gt;from the start of the segment to the memory &lt;br /&gt;location where a word was most recently stored &lt;br /&gt;on the stack (top stack).&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Default segment and offset registers&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Segment offset special purpose&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;CS                     IP                                                Instruction address&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SS                     SP or BP                                      Stack address&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;DS                     BX, DI, SI, val8, val16                   Data address&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;ES                      DI for string instruction                  String destination address&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;End of Stack Segment&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Top of Sack&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Start of Stack Segment&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SS= 5000H&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Physical addresses&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;5FFFFH&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;5FFE0H&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SP=FFE0H&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;50000H&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SS:      5   0   0   0  0&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SP:     +  F    F E  0&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;P.A =    5  F   F E   0  &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Hardwired  &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;zeros&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;23&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Execution Unit (EU)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The Execution unit is responsible for decoding and executing all &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;instructions.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The EU &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Extracts instructions from the top of the queue in the BIU, &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Decodes them, generates operands if necessary, &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Passes them to the BIU and requests it to perform the read or &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;write cycles to memory or I/O and perform the operation &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;specified by the instruction on the operands.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; During the execution of the instruction, the EU tests the status and &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;control flags and updates them based on the results of executing the &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;instruction.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;24&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;EU contd…&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The EU contains:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;-Control circuitry - which directs internal operations.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;- Decoder- translates instructions fetched from memory into a series of &lt;br /&gt;actions which the EU carries out.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;- A 16-bit ALU – which can add, subtract, AND, OR, XOR, increment, &lt;br /&gt;decrement, complement, or shift binary numbers.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;- Registers:–&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;General (multi-purpose) registers:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;AH, AL, BH, BL, CH, CL, DH, DL  or  AX, BX, CX, DX&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;BP, DI, SI&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Special purpose register  :    SP&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;- Flags:- Nine individual bits of the status register are used as control &lt;br /&gt;flags (3 of them) and status flags (6 of them).&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;25&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Pointer and Index registers in the EU&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;E.g.   DS:SI                 ES:DI         &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;The index registers are particularly useful for string manipulations.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Some registers have additional specific uses. E.g.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;AX – as 16-bit accumulator.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;CX – as default counter incase of string and loop instructions.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;BX – as offset storage in case of certain addressing modes.     &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;DX – as an implicit operand or destination in case of few instructions.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;E.g.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;- For memory addressing when data are transferred between I/O port and memory &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;using certain I/O instructions.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;- Holds a part of the result from a multiplication or part of the dividend before a division. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Note: The offset may be the content of IP, BX, SI, DI, SP or an immediate 16-bit value,   &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;depending upon the addressing mode.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;BP - Base pointer register&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;SI - Source index register&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;DI - Destination index register&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;These three register can be used for temporary &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;storage of data just as the general-purpose registers. &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;However, their main use is to hold the 16-bit offset of &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;data word in one of the data segments.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;26&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Signal description of 8086 MP&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;27&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Signal description &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; 8086 MP operates in single processor or multiprocessor &lt;br /&gt;configurations to achieve high performance ( minimum mode &amp;amp; &lt;br /&gt;maximum mode).&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Minimum mode: The 8086 processor works in a single processor &lt;br /&gt;environment. All control signals for memory and I/O are generated by &lt;br /&gt;the microprocessor.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Maximum mode: is designed to be used when a coprocessor exists in &lt;br /&gt;the system. 8086 works in a multiprocessor environment. Control &lt;br /&gt;signals for memory and I/O are generated by an external Bus &lt;br /&gt;Controller.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; The 8086 signals can be categorized in three groups:&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Signals having common functions in minimum as  well as maximum&lt;br /&gt;modes.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Signals which have special functions for minimum mode.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt; Signals having special functions for maximum mode.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;28&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Segmented Memory&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ The memory in an 8086/88 based system is organized as &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;segmented memory.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ The CPU 8086 is able to address 1Mbyte of memory.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ The Complete physically available  memory  may be divided into &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;a number of logical segments.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ The size of each segment is 64 KB.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ A segment is an area that begins at any location which is &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;divisible by 16.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ A segment may be located any where in the memory.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Each of these segments can be used for a specific function.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Code segment is used for storing the instructions.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;29&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Physical Memory&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Code Segment (64KB)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Data Segment (64KB)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Extra Segment (64KB)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Stack Segment (64KB)&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;00000&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;FFFFF&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;1MB&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;30&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;a name=0&gt;&lt;/a&gt;&lt;div style=&quot;page-break-before:always; page-break-after:always&quot;&gt;&lt;div&gt;&lt;p&gt;Contd…&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The stack segment is used as a stack and it is used to store the return &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;addresses.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ The data and extra segments are used for storing data byte.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;❖ Advantages of Segmented memory Scheme&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Allows the memory capacity to be 1MB although the actual &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;addresses to be handled are of 16 bit size.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;➢ Allows the placing of code, data and stack portions of the same &lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;program in different parts (segments) for data and code protection.&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;7/12/2018&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;31&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;</Content>
</Section>
</Archive>
